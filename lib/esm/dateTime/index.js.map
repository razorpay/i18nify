{"version":3,"file":"index.js","sources":["../../../src/common/errorBoundary/index.ts","../../../src/modules/dateTime/utils.ts","../../../src/modules/dateTime/add.ts","../../../src/modules/.internal/utils/getDefaultState.ts","../../../src/modules/.internal/state/index.ts","../../../src/modules/.internal/utils/getLocale.ts","../../../src/modules/dateTime/formatDateTime.ts","../../../src/modules/dateTime/formatDate.ts","../../../src/modules/dateTime/formatTime.ts","../../../src/modules/dateTime/getFirstDayOfWeek.ts","../../../src/modules/dateTime/getQuarter.ts","../../../src/modules/dateTime/getRelativeTime.ts","../../../src/modules/dateTime/getWeek.ts","../../../src/modules/dateTime/getWeekdays.ts","../../../src/modules/dateTime/isAfter.ts","../../../src/modules/dateTime/isBefore.ts","../../../src/modules/dateTime/isLeapYear.ts","../../../src/modules/dateTime/isSameDay.ts","../../../src/modules/dateTime/isValidDate.ts","../../../src/modules/dateTime/constants.ts","../../../src/modules/dateTime/parseDateTime.ts","../../../src/modules/dateTime/subtract.ts"],"sourcesContent":["// Custom Error class to extend properties to error object\nexport class I18nifyError extends Error {\n  timestamp: Date;\n  constructor(message: string | undefined) {\n    super(message);\n    this.name = 'i18nify Error';\n    this.timestamp = new Date();\n    // more params like type of error/severity can be added in future for better debugging.\n  }\n}\n\n/**\n * withErrorBoundary is a higher order function that takes function as parameter and wraps it in try/catch block.\n * It appends additional attributes and serves as a centralized error-handling service.\n * Usage =>\n * const wrappedUtilityFn = withErrorBoundary(utilityFn)\n *\n * @param fn utility that is wrapped in error boundary\n * @returns {Function} returns the function wrapped in try/catch block\n */\nexport const withErrorBoundary = <T extends (...args: any[]) => any>(\n  fn: T,\n): ((...args: Parameters<T>) => ReturnType<T>) => {\n  return function (this: unknown, ...rest: Parameters<T>): ReturnType<T> {\n    try {\n      return fn.call(this, ...rest) as ReturnType<T>;\n    } catch (err) {\n      console.warn('[I18N Error]: ', err);\n      // Currently, we are throwing the error as it is to consumers.\n      // In the future, this can be modified as per our requirement, like an error logging service.\n      throw new I18nifyError(err as string | undefined);\n    }\n  };\n};\n","export const stringToDate = (dateString: string): Date => {\n  const supportedDateFormats = [\n    // Date formats\n    {\n      regex: /^(\\d{4})\\/(\\d{2})\\/(\\d{2})$/,\n      yearIndex: 1,\n      monthIndex: 2,\n      dayIndex: 3,\n    }, // YYYY/MM/DD\n    {\n      regex: /^(\\d{2})\\/(\\d{2})\\/(\\d{4})$/,\n      yearIndex: 3,\n      monthIndex: 2,\n      dayIndex: 1,\n    }, // DD/MM/YYYY\n    {\n      regex: /^(\\d{4})\\.(\\d{2})\\.(\\d{2})$/,\n      yearIndex: 1,\n      monthIndex: 2,\n      dayIndex: 3,\n    }, // YYYY.MM.DD\n    {\n      regex: /^(\\d{2})-(\\d{2})-(\\d{4})$/,\n      yearIndex: 1,\n      monthIndex: 2,\n      dayIndex: 3,\n    }, // DD-MM-YYYY\n    {\n      regex: /^(\\d{2})\\/(\\d{2})\\/(\\d{4})$/,\n      yearIndex: 1,\n      monthIndex: 2,\n      dayIndex: 3,\n    }, // MM/DD/YYYY\n    {\n      regex: /^(\\d{4})-(\\d{2})-(\\d{2})$/,\n      yearIndex: 1,\n      monthIndex: 2,\n      dayIndex: 3,\n    }, // YYYY-MM-DD\n    {\n      regex: /^(\\d{4})\\.\\s*(\\d{2})\\.\\s*(\\d{2})\\.\\s*$/,\n      yearIndex: 1,\n      monthIndex: 2,\n      dayIndex: 3,\n    }, // YYYY. MM. DD.\n    {\n      regex: /^(\\d{2})\\.(\\d{2})\\.(\\d{4})$/,\n      yearIndex: 1,\n      monthIndex: 2,\n      dayIndex: 3,\n    }, // DD.MM.YYYY\n\n    // Timestamp formats\n    {\n      regex: /^(\\d{4})\\/(\\d{2})\\/(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})$/,\n      yearIndex: 1,\n      monthIndex: 2,\n      dayIndex: 3,\n      hourIndex: 4,\n      minuteIndex: 5,\n      secondIndex: 6,\n    }, // YYYY/MM/DD HH:MM:SS\n    {\n      regex: /^(\\d{2})\\/(\\d{2})\\/(\\d{4}) (\\d{2}):(\\d{2}):(\\d{2})$/,\n      yearIndex: 3,\n      monthIndex: 2,\n      dayIndex: 1,\n      hourIndex: 4,\n      minuteIndex: 5,\n      secondIndex: 6,\n    }, // DD/MM/YYYY HH:MM:SS\n    {\n      regex: /^(\\d{4})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})$/,\n      yearIndex: 1,\n      monthIndex: 2,\n      dayIndex: 3,\n      hourIndex: 4,\n      minuteIndex: 5,\n      secondIndex: 6,\n    }, // YYYY-MM-DD HH:MM:SS\n    {\n      regex: /^(\\d{2})-(\\d{2})-(\\d{4}) (\\d{2}):(\\d{2}):(\\d{2})$/,\n      yearIndex: 3,\n      monthIndex: 2,\n      dayIndex: 1,\n      hourIndex: 4,\n      minuteIndex: 5,\n      secondIndex: 6,\n    }, // DD-MM-YYYY HH:MM:SS\n    {\n      regex: /^(\\d{4})\\.(\\d{2})\\.(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})$/,\n      yearIndex: 1,\n      monthIndex: 2,\n      dayIndex: 3,\n      hourIndex: 4,\n      minuteIndex: 5,\n      secondIndex: 6,\n    }, // YYYY.MM.DD HH:MM:SS\n    {\n      regex: /^(\\d{2})\\.(\\d{2})\\.(\\d{4}) (\\d{2}):(\\d{2}):(\\d{2})$/,\n      yearIndex: 3,\n      monthIndex: 2,\n      dayIndex: 1,\n      hourIndex: 4,\n      minuteIndex: 5,\n      secondIndex: 6,\n    }, // DD.MM.YYYY HH:MM:SS\n  ];\n\n  for (const format of supportedDateFormats) {\n    const match = dateString.match(format.regex);\n    if (match) {\n      const year = match[format.yearIndex];\n      const month = match[format.monthIndex];\n      const day = match[format.dayIndex];\n      const hour = format.hourIndex ? match[format.hourIndex] : '00';\n      const minute = format.minuteIndex ? match[format.minuteIndex] : '00';\n      const second = format.secondIndex ? match[format.secondIndex] : '00';\n\n      return new Date(`${year}-${month}-${day}T${hour}:${minute}:${second}`);\n    }\n  }\n\n  throw new Error('Date format not recognized');\n};\n","import { withErrorBoundary } from '../../common/errorBoundary';\nimport { DateInput } from './types';\nimport { stringToDate } from './utils';\n\n/**\n * Adds a specified amount of time to a date.\n *\n * @param date The original date.\n * @param value The amount to add.\n * @param unit The unit of time to add (e.g., 'days', 'months', 'years').\n * @returns A new Date object with the time added.\n */\nconst add = (\n  date: DateInput,\n  value: number,\n  unit: 'days' | 'months' | 'years',\n): Date => {\n  date =\n    typeof date === 'string' ? new Date(stringToDate(date)) : new Date(date);\n\n  switch (unit) {\n    case 'days':\n      date.setDate(date.getDate() + value);\n      break;\n    case 'months':\n      date.setMonth(date.getMonth() + value);\n      break;\n    case 'years':\n      date.setFullYear(date.getFullYear() + value);\n      break;\n  }\n  return date;\n};\n\nexport default withErrorBoundary<typeof add>(add);\n","import type { I18nState } from '../state/types';\n\nexport function getDefaultState(): I18nState {\n  return {\n    locale: '',\n    direction: '',\n    country: '',\n  };\n}\n","import { I18nState } from './types';\nimport { getDefaultState } from '../utils/getDefaultState';\n\nexport class I18nStateManager {\n  private static instance: I18nStateManager | undefined;\n  private state: I18nState;\n\n  private constructor() {\n    this.state = getDefaultState();\n  }\n\n  public static getInstance(): I18nStateManager {\n    if (!I18nStateManager.instance) {\n      I18nStateManager.instance = new I18nStateManager();\n    }\n\n    return I18nStateManager.instance;\n  }\n\n  public static resetInstance(): void {\n    I18nStateManager.instance = undefined;\n  }\n\n  public getState(): I18nState {\n    return { ...this.state };\n  }\n\n  public setState(newState: Partial<I18nState>): void {\n    this.state = { ...this.state, ...newState };\n  }\n\n  public resetState(): void {\n    this.state = getDefaultState();\n  }\n}\n\nexport default I18nStateManager.getInstance();\n","export const getLocale = (): string => {\n  // Check if running in a non-browser environment (e.g., Node.js or older browsers).\n  if (typeof navigator === 'undefined') {\n    return 'en-IN';\n  }\n\n  // Check if the browser supports the Intl object and user language preferences.\n  if (\n    window.Intl &&\n    typeof window.Intl === 'object' &&\n    (window.navigator.languages || window.navigator.language)\n  ) {\n    const userLocales = window.navigator.languages || [\n      window.navigator.language,\n    ];\n    return userLocales[0];\n  }\n\n  // Fallback to a supported locale or the default locale.\n  return 'en-IN';\n};\n","import { withErrorBoundary } from '../../common/errorBoundary';\nimport state from '../.internal/state';\nimport { getLocale } from '../.internal/utils';\nimport { DateInput, Locale } from './types';\nimport { stringToDate } from './utils';\n\n/**\n * Formats date and time based on the locale.\n * @param {DateInput} date - Date object or date string.\n * @param {Locale} locale - Locale string.\n * @param {Intl.DateTimeFormatOptions} intlOptions - Intl.DateTimeFormat options (optional).\n * @returns {string} Formatted date and time string.\n */\nconst formatDateTime = (\n  date: DateInput,\n  locale?: Locale,\n  intlOptions: Intl.DateTimeFormatOptions = {},\n): string => {\n  /** retrieve locale from below areas in order of preference\n   * 1. locale (used in case if someone wants to override locale just for a specific area and not globally)\n   * 2. i18nState.locale (uses locale set globally)\n   * 3. navigator (in case locale is not passed or set, use it from browser's navigator)\n   * */\n  if (!locale) locale = state.getState().locale || getLocale();\n\n  date =\n    typeof date === 'string' ? new Date(stringToDate(date)) : new Date(date);\n\n  const dateObj: Date = date instanceof Date ? date : new Date(date);\n  let formatter;\n\n  try {\n    formatter = new Intl.DateTimeFormat(locale, intlOptions);\n  } catch (err) {\n    if (err instanceof Error) {\n      throw new Error(err.message);\n    } else {\n      throw new Error(`An unknown error occurred = ${err}`);\n    }\n  }\n\n  return formatter.format(dateObj);\n};\n\nexport default withErrorBoundary<typeof formatDateTime>(formatDateTime);\n","import { withErrorBoundary } from '../../common/errorBoundary';\nimport state from '../.internal/state';\nimport { getLocale } from '../.internal/utils';\nimport formatDateTime from './formatDateTime';\nimport {\n  DateInput,\n  Locale,\n  DateTimeFormatOptions,\n  DateFormatOptions,\n} from './types';\n\n/**\n * Formats date based on the locale.\n * @param {DateInput} date - Date object or date string.\n * @param {Locale} locale - Locale string.\n * @param {DateFormatOptions} intlOptions - Intl.DateTimeFormat options for date formatting (optional).\n * @returns {string} Formatted date string.\n */\nconst formatDate = (\n  date: DateInput,\n  locale?: Locale,\n  intlOptions: DateFormatOptions = {},\n): string => {\n  /** retrieve locale from below areas in order of preference\n   * 1. locale (used in case if someone wants to override locale just for a specific area and not globally)\n   * 2. i18nState.locale (uses locale set globally)\n   * 3. navigator (in case locale is not passed or set, use it from browser's navigator)\n   * */\n  if (!locale) locale = state.getState().locale || getLocale();\n\n  const fullOptions: DateTimeFormatOptions = {\n    ...intlOptions,\n    timeStyle: undefined,\n  };\n\n  let formattedDate;\n\n  try {\n    formattedDate = formatDateTime(date, locale, fullOptions);\n  } catch (err) {\n    if (err instanceof Error) {\n      throw new Error(err.message);\n    } else {\n      throw new Error(`An unknown error occurred = ${err}`);\n    }\n  }\n\n  return formattedDate;\n};\n\nexport default withErrorBoundary<typeof formatDate>(formatDate);\n","import { withErrorBoundary } from '../../common/errorBoundary';\nimport state from '../.internal/state';\nimport { getLocale } from '../.internal/utils';\nimport formatDateTime from './formatDateTime';\nimport {\n  DateInput,\n  Locale,\n  DateTimeFormatOptions,\n  TimeFormatOptions,\n} from './types';\n\n/**\n * Formats time based on the locale.\n * @param {DateInput} date - Date object or date string.\n * @param {Locale} locale - Locale string.\n * @param {TimeFormatOptions} intlOptions - Intl.DateTimeFormat options for time formatting (optional).\n * @returns {string} Formatted time string.\n */\nconst formatTime = (\n  date: DateInput,\n  locale?: Locale,\n  intlOptions: TimeFormatOptions = {},\n): string => {\n  /** retrieve locale from below areas in order of preference\n   * 1. locale (used in case if someone wants to override locale just for a specific area and not globally)\n   * 2. i18nState.locale (uses locale set globally)\n   * 3. navigator (in case locale is not passed or set, use it from browser's navigator)\n   * */\n  if (!locale) locale = state.getState().locale || getLocale();\n\n  const fullOptions: DateTimeFormatOptions = {\n    ...intlOptions,\n    dateStyle: undefined,\n  };\n\n  let formattedTime;\n\n  try {\n    formattedTime = formatDateTime(date, locale, fullOptions);\n  } catch (err) {\n    if (err instanceof Error) {\n      throw new Error(err.message);\n    } else {\n      throw new Error(`An unknown error occurred = ${err}`);\n    }\n  }\n\n  return formattedTime;\n};\n\nexport default withErrorBoundary<typeof formatTime>(formatTime);\n","import { withErrorBoundary } from '../../common/errorBoundary';\nimport state from '../.internal/state';\nimport { getLocale } from '../.internal/utils';\n\n/**\n * Gets the first day of the week for a given locale.\n *\n * @param locale The locale to determine the first day of the week for.\n * @param intlOptions Optional Intl.DateTimeFormatOptions for customization.\n * @returns The first day of the week (0-6, where 0 is Sunday).\n */\nconst getFirstDayOfWeek = (\n  locale: string,\n  intlOptions: Intl.DateTimeFormatOptions = {},\n): string => {\n  /** retrieve locale from below areas in order of preference\n   * 1. locale (used in case if someone wants to override locale just for a specific area and not globally)\n   * 2. i18nState.locale (uses locale set globally)\n   * 3. navigator (in case locale is not passed or set, use it from browser's navigator)\n   * */\n  if (!locale) locale = state.getState().locale || getLocale();\n\n  let formatted;\n\n  if (!intlOptions.weekday) intlOptions.weekday = 'long';\n\n  try {\n    const formatter = new Intl.DateTimeFormat(locale, intlOptions);\n    /**\n     * This date was chosen because January 2, 2000, is a Sunday.\n     * In the Gregorian calendar, Sunday is considered the start of the week in some cultures (like in the United States), while in others, it's Monday (like in much of Europe).\n     * By using a date that is known to be a Sunday, the function can accurately determine what day of the week is considered the start in the specified locale.\n     */\n    const sundayDate = new Date(2000, 0, 2); // A known Sunday\n    formatted = formatter.format(sundayDate);\n  } catch (err) {\n    if (err instanceof Error) {\n      throw new Error(err.message);\n    } else {\n      throw new Error(`An unknown error occurred = ${err}`);\n    }\n  }\n\n  // Generate localized weekdays array starting from Sunday\n  const weekdays = Array.from({ length: 7 }, (_, i) =>\n    new Intl.DateTimeFormat(locale, intlOptions).format(\n      new Date(2000, 0, 2 + i),\n    ),\n  );\n\n  const firstDayIndex = weekdays.indexOf(formatted);\n  if (firstDayIndex === -1) {\n    throw new Error('Unable to determine the first day of the week');\n  }\n\n  return weekdays[(firstDayIndex + 1) % 7]; // Adjusting since our reference date is a Sunday\n};\n\nexport default withErrorBoundary<typeof getFirstDayOfWeek>(getFirstDayOfWeek);\n","import { withErrorBoundary } from '../../common/errorBoundary';\nimport { DateInput } from './types';\nimport { stringToDate } from './utils';\n\n/**\n * Determines the quarter of the year for a given date.\n *\n * @param date The date to determine the quarter for.\n * @returns The quarter of the year (1-4).\n */\nconst getQuarter = (date: DateInput): number => {\n  date =\n    typeof date === 'string' ? new Date(stringToDate(date)) : new Date(date);\n  return Math.ceil((date.getMonth() + 1) / 3);\n};\n\nexport default withErrorBoundary<typeof getQuarter>(getQuarter);\n","import { withErrorBoundary } from '../../common/errorBoundary';\nimport state from '../.internal/state';\nimport { getLocale } from '../.internal/utils';\nimport { DateInput, Locale } from './types';\nimport { stringToDate } from './utils';\n\n/**\n * Provides a relative time string (e.g., '3 hours ago', 'in 2 days').\n * This function calculates the difference between the given date and the base date,\n * then formats it in a locale-sensitive manner. It allows customization of the output\n * through Intl.RelativeTimeFormat options.\n *\n * @param date - The date to compare.\n * @param baseDate - The date to compare against (default: current date).\n * @param locale - The locale to use for formatting.\n * @param intlOptions - Options for the Intl.RelativeTimeFormat (optional).\n * @returns The relative time as a string.\n */\nconst getRelativeTime = (\n  date: DateInput,\n  baseDate: DateInput = new Date(),\n  locale?: Locale,\n  intlOptions?: Intl.RelativeTimeFormatOptions,\n): string => {\n  date =\n    typeof date === 'string' ? new Date(stringToDate(date)) : new Date(date);\n\n  baseDate =\n    typeof baseDate === 'string'\n      ? new Date(stringToDate(baseDate))\n      : new Date(baseDate);\n  /** retrieve locale from below areas in order of preference\n   * 1. locale (used in case if someone wants to override locale just for a specific area and not globally)\n   * 2. i18nState.locale (uses locale set globally)\n   * 3. navigator (in case locale is not passed or set, use it from browser's navigator)\n   * */\n  if (!locale) locale = state.getState().locale || getLocale();\n\n  const diffInSeconds = (date.getTime() - baseDate.getTime()) / 1000;\n\n  // Define time units in seconds\n  const minute = 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n  const week = day * 7;\n  const month = day * 30;\n  const year = day * 365;\n\n  let value: number;\n  let unit: Intl.RelativeTimeFormatUnit;\n\n  if (Math.abs(diffInSeconds) < minute) {\n    value = diffInSeconds;\n    unit = 'second';\n  } else if (Math.abs(diffInSeconds) < hour) {\n    value = diffInSeconds / minute;\n    unit = 'minute';\n  } else if (Math.abs(diffInSeconds) < day) {\n    value = diffInSeconds / hour;\n    unit = 'hour';\n  } else if (Math.abs(diffInSeconds) < week) {\n    value = diffInSeconds / day;\n    unit = 'day';\n  } else if (Math.abs(diffInSeconds) < month) {\n    value = diffInSeconds / week;\n    unit = 'week';\n  } else if (Math.abs(diffInSeconds) < year) {\n    value = diffInSeconds / month;\n    unit = 'month';\n  } else {\n    value = diffInSeconds / year;\n    unit = 'year';\n  }\n\n  let relativeTime;\n\n  try {\n    const rtf = new Intl.RelativeTimeFormat(locale, intlOptions);\n    relativeTime = rtf.format(Math.round(value), unit);\n  } catch (err) {\n    if (err instanceof Error) {\n      throw new Error(err.message);\n    } else {\n      throw new Error(`An unknown error occurred = ${err}`);\n    }\n  }\n\n  return relativeTime;\n};\n\nexport default withErrorBoundary<typeof getRelativeTime>(getRelativeTime);\n","import { withErrorBoundary } from '../../common/errorBoundary';\nimport { DateInput } from './types';\nimport { stringToDate } from './utils';\n\n/**\n * Calculates the week number of the year for a given date.\n *\n * @param date The date to calculate the week number for.\n * @returns The week number of the year.\n */\nconst getWeek = (date: DateInput): number => {\n  date =\n    typeof date === 'string' ? new Date(stringToDate(date)) : new Date(date);\n  const firstDayOfYear = new Date(date.getFullYear(), 0, 1);\n  const pastDaysOfYear = (date.getTime() - firstDayOfYear.getTime()) / 86400000; //  86400000 represents the number of milliseconds in a day\n  return Math.ceil((pastDaysOfYear + firstDayOfYear.getDay() + 1) / 7);\n};\n\nexport default withErrorBoundary<typeof getWeek>(getWeek);\n","import { withErrorBoundary } from '../../common/errorBoundary';\nimport state from '../.internal/state';\nimport { getLocale } from '../.internal/utils';\nimport { Locale } from './types';\n\n/**\n * Returns an array of weekdays according to the specified locale.\n *\n * @param locale The locale to get weekdays for.\n * @param intlOptions Optional Intl.DateTimeFormatOptions for customization.\n * @returns An array of weekday names.\n */\nconst getWeekdays = (\n  locale?: Locale,\n  intlOptions: Intl.DateTimeFormatOptions = {},\n): string[] => {\n  try {\n    /** retrieve locale from below areas in order of preference\n     * 1. locale (used in case if someone wants to override locale just for a specific area and not globally)\n     * 2. i18nState.locale (uses locale set globally)\n     * 3. navigator (in case locale is not passed or set, use it from browser's navigator)\n     * */\n    if (!locale) locale = state.getState().locale || getLocale();\n    if (!intlOptions.weekday) intlOptions.weekday = 'long';\n\n    const formatter = new Intl.DateTimeFormat(locale, intlOptions);\n\n    /** The date January 1, 1970, is a well-known reference point in computing known as the Unix epoch.\n     * It's the date at which time is measured for Unix systems, making it a consistent and reliable choice for date calculations.\n     * The choice of the date January 4, 1970, as the starting point is significant.\n     * January 4, 1970, was a Sunday.\n     * Since weeks typically start on Sunday or Monday in most locales, starting from a known Sunday allows the function to cycle through a complete week, capturing all weekdays in the order they appear for the given locale.\n     * */\n    return Array.from({ length: 7 }, (_, i) =>\n      formatter.format(new Date(1970, 0, 4 + i)),\n    );\n  } catch (err) {\n    if (err instanceof Error) {\n      throw new Error(err.message);\n    } else {\n      throw new Error(`An unknown error occurred = ${err}`);\n    }\n  }\n};\n\nexport default withErrorBoundary<typeof getWeekdays>(getWeekdays);\n","import { withErrorBoundary } from '../../common/errorBoundary';\nimport { DateInput } from './types';\nimport { stringToDate } from './utils';\n\n/**\n * Compares two dates to determine if the first is after the second.\n * @param {DateInput} date1 - First date object or date string.\n * @param {DateInput} date2 - Second date object or date string.\n * @returns {boolean} True if date1 is after date2.\n */\nconst isAfter = (date1: DateInput, date2: DateInput): boolean => {\n  date1 =\n    typeof date1 === 'string' ? new Date(stringToDate(date1)) : new Date(date1);\n  date2 =\n    typeof date2 === 'string' ? new Date(stringToDate(date2)) : new Date(date2);\n\n  const dateObj1: Date = date1 instanceof Date ? date1 : new Date(date1);\n  const dateObj2: Date = date2 instanceof Date ? date2 : new Date(date2);\n  return dateObj1 > dateObj2;\n};\n\nexport default withErrorBoundary<typeof isAfter>(isAfter);\n","import { withErrorBoundary } from '../../common/errorBoundary';\nimport { DateInput } from './types';\nimport { stringToDate } from './utils';\n\n/**\n * Compares two dates to determine if the first is before the second.\n * @param {DateInput} date1 - First date object or date string.\n * @param {DateInput} date2 - Second date object or date string.\n * @returns {boolean} True if date1 is before date2.\n */\nconst isBefore = (date1: DateInput, date2: DateInput): boolean => {\n  date1 =\n    typeof date1 === 'string' ? new Date(stringToDate(date1)) : new Date(date1);\n  date2 =\n    typeof date2 === 'string' ? new Date(stringToDate(date2)) : new Date(date2);\n\n  const dateObj1: Date = date1 instanceof Date ? date1 : new Date(date1);\n  const dateObj2: Date = date2 instanceof Date ? date2 : new Date(date2);\n  return dateObj1 < dateObj2;\n};\n\nexport default withErrorBoundary<typeof isBefore>(isBefore);\n","import { withErrorBoundary } from '../../common/errorBoundary';\n\n/**\n * Checks if a given year is a leap year.\n *\n * @param year The year to check.\n * @returns True if the year is a leap year, false otherwise.\n */\nconst isLeapYear = (year: number): boolean => {\n  return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;\n};\n\nexport default withErrorBoundary<typeof isLeapYear>(isLeapYear);\n","import { withErrorBoundary } from '../../common/errorBoundary';\nimport { stringToDate } from './utils';\n\n/**\n * Checks if two dates fall on the same day.\n *\n * @param date1 The first date.\n * @param date2 The second date.\n * @returns True if both dates are on the same day, false otherwise.\n */\nconst isSameDay = (date1: Date, date2: Date): boolean => {\n  date1 =\n    typeof date1 === 'string' ? new Date(stringToDate(date1)) : new Date(date1);\n  date2 =\n    typeof date2 === 'string' ? new Date(stringToDate(date2)) : new Date(date2);\n\n  return (\n    date1.getDate() === date2.getDate() &&\n    date1.getMonth() === date2.getMonth() &&\n    date1.getFullYear() === date2.getFullYear()\n  );\n};\n\nexport default withErrorBoundary<typeof isSameDay>(isSameDay);\n","import { withErrorBoundary } from '../../common/errorBoundary';\nimport { stringToDate } from './utils';\n\n/**\n * Checks if a given object is a valid Date object.\n *\n * @param date The object to check.\n * @returns True if the object is a valid Date, false otherwise.\n */\nconst isValidDate = (date: any): boolean => {\n  try {\n    date =\n      typeof date === 'string' ? new Date(stringToDate(date)) : new Date(date);\n  } catch (err) {\n    if (err instanceof Error) {\n      throw new Error(err.message);\n    } else {\n      throw new Error(`An unknown error occurred = ${err}`);\n    }\n  }\n\n  return date instanceof Date && !isNaN(date.getTime());\n};\n\nexport default withErrorBoundary<typeof isValidDate>(isValidDate);\n","export const ALLOWED_FORMAT_PARTS_KEYS = [\n  'day',\n  'dayPeriod',\n  'era',\n  'fractionalSecond',\n  'hour',\n  'minute',\n  'month',\n  'relatedYear',\n  'second',\n  'timeZone',\n  'weekday',\n  'year',\n  'yearName',\n] as const;\n","import { withErrorBoundary } from '../../common/errorBoundary';\nimport state from '../.internal/state';\nimport { getLocale } from '../.internal/utils';\nimport {\n  DateInput,\n  FormattedPartsObject,\n  Locale,\n  ParsedDateTime,\n} from './types';\nimport { ALLOWED_FORMAT_PARTS_KEYS } from './constants';\nimport { stringToDate } from './utils';\n\n/**\n * Parses a date input and returns a detailed object containing various date components\n * and their formatted representations.\n *\n * @param {DateInput} dateInput - The date input, can be a string or a Date object.\n * @param {Intl.DateTimeFormatOptions} [intlOptions={}] - Internationalization options for date formatting.\n * @param {Locale} [locale] - The locale to use for formatting. Defaults to system locale if not provided.\n * @returns {ParsedDateTime} An object containing the parsed date and its components.\n */\nconst parseDateTime = (\n  dateInput: DateInput,\n  intlOptions: Intl.DateTimeFormatOptions = {},\n  locale?: Locale,\n): ParsedDateTime => {\n  // Parse the input date, converting strings to Date objects if necessary\n  const date =\n    typeof dateInput === 'string'\n      ? new Date(stringToDate(dateInput))\n      : new Date(dateInput);\n\n  // Use the provided locale or fallback to the system's default locale\n  locale = locale || state.getState().locale || getLocale();\n\n  try {\n    // Create an Intl.DateTimeFormat instance for formatting\n    const dateTimeFormat = new Intl.DateTimeFormat(locale, intlOptions);\n    const formattedParts = dateTimeFormat.formatToParts(date);\n    const formattedObj: FormattedPartsObject = {};\n\n    // Initialize date components with default or zero values\n    let year = 0,\n      month = 1, // Default to January\n      day = 1, // Default to the 1st day of the month\n      hours = 0,\n      minutes = 0,\n      seconds = 0;\n\n    // Iterate over each part of the formatted date\n    formattedParts.forEach((part) => {\n      // If the part is allowed, add it to the formatted object\n      // @ts-expect-error only allowed keys are added to the formattedObj. For eg, key 'literal', 'unknown' is skipped\n      if (ALLOWED_FORMAT_PARTS_KEYS.includes(part.type)) {\n        // @ts-expect-error only allowed keys are added to the formattedObj. For eg, key 'literal', 'unknown' is skipped\n        formattedObj[part.type] = (formattedObj[part.type] || '') + part.value;\n      }\n\n      // For other components, parse and assign them to the respective variables\n      const value = parseInt(part.value, 10);\n      switch (part.type) {\n        case 'year':\n          year = value;\n          break;\n        case 'month':\n          month = value; // Keep month 1-indexed (January = 1)\n          break;\n        case 'day':\n          day = value;\n          break;\n        case 'hour':\n          hours = value;\n          break;\n        case 'minute':\n          minutes = value;\n          break;\n        case 'second':\n          seconds = value;\n          break;\n        default:\n          // Ignore other parts\n          break;\n      }\n    });\n\n    // Construct the parsed date\n    const parsedDate = new Date(year, month - 1, day, hours, minutes, seconds);\n\n    // If the constructed date is invalid, throw an error\n    if (isNaN(parsedDate.getTime())) {\n      throw new Error('Invalid date');\n    }\n\n    // Return the detailed parsed date object\n    return {\n      ...formattedObj,\n      rawParts: formattedParts,\n      formattedDate: formattedParts.map((p) => p.value).join(''),\n      dateObj: parsedDate,\n    };\n  } catch (err) {\n    // Handle any errors that occur during parsing\n    if (err instanceof Error) {\n      throw err;\n    } else {\n      throw new Error(`An unknown error occurred: ${err}`);\n    }\n  }\n};\n\nexport default withErrorBoundary<typeof parseDateTime>(parseDateTime);\n","import { withErrorBoundary } from '../../common/errorBoundary';\nimport add from './add';\nimport { DateInput } from './types';\nimport { stringToDate } from './utils';\n\n/**\n * Subtracts a specified amount of time from a date.\n *\n * @param date The original date.\n * @param value The amount to subtract.\n * @param unit The unit of time to subtract (e.g., 'days', 'months', 'years').\n * @returns A new Date object with the time subtracted.\n */\nconst subtract = (\n  date: DateInput,\n  value: number,\n  unit: 'days' | 'months' | 'years',\n): Date => {\n  date =\n    typeof date === 'string' ? new Date(stringToDate(date)) : new Date(date);\n\n  return add(date, -value, unit); // Reuse the add function with negative value\n};\n\nexport default withErrorBoundary<typeof subtract>(subtract);\n"],"names":["formatDateTime","add"],"mappings":"AAAA;AACM,MAAO,YAAa,SAAQ,KAAK,CAAA;AAErC,IAAA,WAAA,CAAY,OAA2B,EAAA;QACrC,KAAK,CAAC,OAAO,CAAC,CAAC;AACf,QAAA,IAAI,CAAC,IAAI,GAAG,eAAe,CAAC;AAC5B,QAAA,IAAI,CAAC,SAAS,GAAG,IAAI,IAAI,EAAE,CAAC;;KAE7B;AACF,CAAA;AAED;;;;;;;;AAQG;AACI,MAAM,iBAAiB,GAAG,CAC/B,EAAK,KAC0C;IAC/C,OAAO,UAAyB,GAAG,IAAmB,EAAA;QACpD,IAAI;YACF,OAAO,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,IAAI,CAAkB,CAAC;AAChD,SAAA;AAAC,QAAA,OAAO,GAAG,EAAE;AACZ,YAAA,OAAO,CAAC,IAAI,CAAC,gBAAgB,EAAE,GAAG,CAAC,CAAC;;;AAGpC,YAAA,MAAM,IAAI,YAAY,CAAC,GAAyB,CAAC,CAAC;AACnD,SAAA;AACH,KAAC,CAAC;AACJ,CAAC;;ACjCM,MAAM,YAAY,GAAG,CAAC,UAAkB,KAAU;AACvD,IAAA,MAAM,oBAAoB,GAAG;;AAE3B,QAAA;AACE,YAAA,KAAK,EAAE,6BAA6B;AACpC,YAAA,SAAS,EAAE,CAAC;AACZ,YAAA,UAAU,EAAE,CAAC;AACb,YAAA,QAAQ,EAAE,CAAC;AACZ,SAAA;AACD,QAAA;AACE,YAAA,KAAK,EAAE,6BAA6B;AACpC,YAAA,SAAS,EAAE,CAAC;AACZ,YAAA,UAAU,EAAE,CAAC;AACb,YAAA,QAAQ,EAAE,CAAC;AACZ,SAAA;AACD,QAAA;AACE,YAAA,KAAK,EAAE,6BAA6B;AACpC,YAAA,SAAS,EAAE,CAAC;AACZ,YAAA,UAAU,EAAE,CAAC;AACb,YAAA,QAAQ,EAAE,CAAC;AACZ,SAAA;AACD,QAAA;AACE,YAAA,KAAK,EAAE,2BAA2B;AAClC,YAAA,SAAS,EAAE,CAAC;AACZ,YAAA,UAAU,EAAE,CAAC;AACb,YAAA,QAAQ,EAAE,CAAC;AACZ,SAAA;AACD,QAAA;AACE,YAAA,KAAK,EAAE,6BAA6B;AACpC,YAAA,SAAS,EAAE,CAAC;AACZ,YAAA,UAAU,EAAE,CAAC;AACb,YAAA,QAAQ,EAAE,CAAC;AACZ,SAAA;AACD,QAAA;AACE,YAAA,KAAK,EAAE,2BAA2B;AAClC,YAAA,SAAS,EAAE,CAAC;AACZ,YAAA,UAAU,EAAE,CAAC;AACb,YAAA,QAAQ,EAAE,CAAC;AACZ,SAAA;AACD,QAAA;AACE,YAAA,KAAK,EAAE,wCAAwC;AAC/C,YAAA,SAAS,EAAE,CAAC;AACZ,YAAA,UAAU,EAAE,CAAC;AACb,YAAA,QAAQ,EAAE,CAAC;AACZ,SAAA;AACD,QAAA;AACE,YAAA,KAAK,EAAE,6BAA6B;AACpC,YAAA,SAAS,EAAE,CAAC;AACZ,YAAA,UAAU,EAAE,CAAC;AACb,YAAA,QAAQ,EAAE,CAAC;AACZ,SAAA;;AAGD,QAAA;AACE,YAAA,KAAK,EAAE,qDAAqD;AAC5D,YAAA,SAAS,EAAE,CAAC;AACZ,YAAA,UAAU,EAAE,CAAC;AACb,YAAA,QAAQ,EAAE,CAAC;AACX,YAAA,SAAS,EAAE,CAAC;AACZ,YAAA,WAAW,EAAE,CAAC;AACd,YAAA,WAAW,EAAE,CAAC;AACf,SAAA;AACD,QAAA;AACE,YAAA,KAAK,EAAE,qDAAqD;AAC5D,YAAA,SAAS,EAAE,CAAC;AACZ,YAAA,UAAU,EAAE,CAAC;AACb,YAAA,QAAQ,EAAE,CAAC;AACX,YAAA,SAAS,EAAE,CAAC;AACZ,YAAA,WAAW,EAAE,CAAC;AACd,YAAA,WAAW,EAAE,CAAC;AACf,SAAA;AACD,QAAA;AACE,YAAA,KAAK,EAAE,mDAAmD;AAC1D,YAAA,SAAS,EAAE,CAAC;AACZ,YAAA,UAAU,EAAE,CAAC;AACb,YAAA,QAAQ,EAAE,CAAC;AACX,YAAA,SAAS,EAAE,CAAC;AACZ,YAAA,WAAW,EAAE,CAAC;AACd,YAAA,WAAW,EAAE,CAAC;AACf,SAAA;AACD,QAAA;AACE,YAAA,KAAK,EAAE,mDAAmD;AAC1D,YAAA,SAAS,EAAE,CAAC;AACZ,YAAA,UAAU,EAAE,CAAC;AACb,YAAA,QAAQ,EAAE,CAAC;AACX,YAAA,SAAS,EAAE,CAAC;AACZ,YAAA,WAAW,EAAE,CAAC;AACd,YAAA,WAAW,EAAE,CAAC;AACf,SAAA;AACD,QAAA;AACE,YAAA,KAAK,EAAE,qDAAqD;AAC5D,YAAA,SAAS,EAAE,CAAC;AACZ,YAAA,UAAU,EAAE,CAAC;AACb,YAAA,QAAQ,EAAE,CAAC;AACX,YAAA,SAAS,EAAE,CAAC;AACZ,YAAA,WAAW,EAAE,CAAC;AACd,YAAA,WAAW,EAAE,CAAC;AACf,SAAA;AACD,QAAA;AACE,YAAA,KAAK,EAAE,qDAAqD;AAC5D,YAAA,SAAS,EAAE,CAAC;AACZ,YAAA,UAAU,EAAE,CAAC;AACb,YAAA,QAAQ,EAAE,CAAC;AACX,YAAA,SAAS,EAAE,CAAC;AACZ,YAAA,WAAW,EAAE,CAAC;AACd,YAAA,WAAW,EAAE,CAAC;AACf,SAAA;KACF,CAAC;AAEF,IAAA,KAAK,MAAM,MAAM,IAAI,oBAAoB,EAAE;QACzC,MAAM,KAAK,GAAG,UAAU,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;AAC7C,QAAA,IAAI,KAAK,EAAE;YACT,MAAM,IAAI,GAAG,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;YACrC,MAAM,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;YACvC,MAAM,GAAG,GAAG,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;AACnC,YAAA,MAAM,IAAI,GAAG,MAAM,CAAC,SAAS,GAAG,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC;AAC/D,YAAA,MAAM,MAAM,GAAG,MAAM,CAAC,WAAW,GAAG,KAAK,CAAC,MAAM,CAAC,WAAW,CAAC,GAAG,IAAI,CAAC;AACrE,YAAA,MAAM,MAAM,GAAG,MAAM,CAAC,WAAW,GAAG,KAAK,CAAC,MAAM,CAAC,WAAW,CAAC,GAAG,IAAI,CAAC;AAErE,YAAA,OAAO,IAAI,IAAI,CAAC,CAAG,EAAA,IAAI,IAAI,KAAK,CAAA,CAAA,EAAI,GAAG,CAAA,CAAA,EAAI,IAAI,CAAI,CAAA,EAAA,MAAM,IAAI,MAAM,CAAA,CAAE,CAAC,CAAC;AACxE,SAAA;AACF,KAAA;AAED,IAAA,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC,CAAC;AAChD,CAAC;;ACxHD;;;;;;;AAOG;AACH,MAAM,GAAG,GAAG,CACV,IAAe,EACf,KAAa,EACb,IAAiC,KACzB;IACR,IAAI;QACF,OAAO,IAAI,KAAK,QAAQ,GAAG,IAAI,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC;AAE3E,IAAA,QAAQ,IAAI;AACV,QAAA,KAAK,MAAM;YACT,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,KAAK,CAAC,CAAC;YACrC,MAAM;AACR,QAAA,KAAK,QAAQ;YACX,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,EAAE,GAAG,KAAK,CAAC,CAAC;YACvC,MAAM;AACR,QAAA,KAAK,OAAO;YACV,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,WAAW,EAAE,GAAG,KAAK,CAAC,CAAC;YAC7C,MAAM;AACT,KAAA;AACD,IAAA,OAAO,IAAI,CAAC;AACd,CAAC,CAAC;AAEF,YAAe,iBAAiB,CAAa,GAAG,CAAC;;SChCjC,eAAe,GAAA;IAC7B,OAAO;AACL,QAAA,MAAM,EAAE,EAAE;AACV,QAAA,SAAS,EAAE,EAAE;AACb,QAAA,OAAO,EAAE,EAAE;KACZ,CAAC;AACJ;;MCLa,gBAAgB,CAAA;AAI3B,IAAA,WAAA,GAAA;AACE,QAAA,IAAI,CAAC,KAAK,GAAG,eAAe,EAAE,CAAC;KAChC;AAEM,IAAA,OAAO,WAAW,GAAA;AACvB,QAAA,IAAI,CAAC,gBAAgB,CAAC,QAAQ,EAAE;AAC9B,YAAA,gBAAgB,CAAC,QAAQ,GAAG,IAAI,gBAAgB,EAAE,CAAC;AACpD,SAAA;QAED,OAAO,gBAAgB,CAAC,QAAQ,CAAC;KAClC;AAEM,IAAA,OAAO,aAAa,GAAA;AACzB,QAAA,gBAAgB,CAAC,QAAQ,GAAG,SAAS,CAAC;KACvC;IAEM,QAAQ,GAAA;QACb,OAAY,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,IAAI,CAAC,KAAK,CAAG,CAAA;KAC1B;AAEM,IAAA,QAAQ,CAAC,QAA4B,EAAA;QAC1C,IAAI,CAAC,KAAK,GAAQ,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,IAAI,CAAC,KAAK,CAAA,EAAK,QAAQ,CAAE,CAAC;KAC7C;IAEM,UAAU,GAAA;AACf,QAAA,IAAI,CAAC,KAAK,GAAG,eAAe,EAAE,CAAC;KAChC;AACF,CAAA;AAED,YAAe,gBAAgB,CAAC,WAAW,EAAE;;ACpCtC,MAAM,SAAS,GAAG,MAAa;;AAEpC,IAAA,IAAI,OAAO,SAAS,KAAK,WAAW,EAAE;AACpC,QAAA,OAAO,OAAO,CAAC;AAChB,KAAA;;IAGD,IACE,MAAM,CAAC,IAAI;AACX,QAAA,OAAO,MAAM,CAAC,IAAI,KAAK,QAAQ;AAC/B,SAAC,MAAM,CAAC,SAAS,CAAC,SAAS,IAAI,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,EACzD;AACA,QAAA,MAAM,WAAW,GAAG,MAAM,CAAC,SAAS,CAAC,SAAS,IAAI;YAChD,MAAM,CAAC,SAAS,CAAC,QAAQ;SAC1B,CAAC;AACF,QAAA,OAAO,WAAW,CAAC,CAAC,CAAC,CAAC;AACvB,KAAA;;AAGD,IAAA,OAAO,OAAO,CAAC;AACjB,CAAC;;ACdD;;;;;;AAMG;AACH,MAAM,cAAc,GAAG,CACrB,IAAe,EACf,MAAe,EACf,WAAA,GAA0C,EAAE,KAClC;AACV;;;;AAIK;AACL,IAAA,IAAI,CAAC,MAAM;QAAE,MAAM,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC,MAAM,IAAI,SAAS,EAAE,CAAC;IAE7D,IAAI;QACF,OAAO,IAAI,KAAK,QAAQ,GAAG,IAAI,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC;AAE3E,IAAA,MAAM,OAAO,GAAS,IAAI,YAAY,IAAI,GAAG,IAAI,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC;AACnE,IAAA,IAAI,SAAS,CAAC;IAEd,IAAI;QACF,SAAS,GAAG,IAAI,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC;AAC1D,KAAA;AAAC,IAAA,OAAO,GAAG,EAAE;QACZ,IAAI,GAAG,YAAY,KAAK,EAAE;AACxB,YAAA,MAAM,IAAI,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;AAC9B,SAAA;AAAM,aAAA;AACL,YAAA,MAAM,IAAI,KAAK,CAAC,+BAA+B,GAAG,CAAA,CAAE,CAAC,CAAC;AACvD,SAAA;AACF,KAAA;AAED,IAAA,OAAO,SAAS,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;AACnC,CAAC,CAAC;AAEF,uBAAe,iBAAiB,CAAwB,cAAc,CAAC;;ACjCvE;;;;;;AAMG;AACH,MAAM,UAAU,GAAG,CACjB,IAAe,EACf,MAAe,EACf,WAAA,GAAiC,EAAE,KACzB;AACV;;;;AAIK;AACL,IAAA,IAAI,CAAC,MAAM;QAAE,MAAM,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC,MAAM,IAAI,SAAS,EAAE,CAAC;IAE7D,MAAM,WAAW,mCACZ,WAAW,CAAA,EAAA,EACd,SAAS,EAAE,SAAS,GACrB,CAAC;AAEF,IAAA,IAAI,aAAa,CAAC;IAElB,IAAI;QACF,aAAa,GAAGA,gBAAc,CAAC,IAAI,EAAE,MAAM,EAAE,WAAW,CAAC,CAAC;AAC3D,KAAA;AAAC,IAAA,OAAO,GAAG,EAAE;QACZ,IAAI,GAAG,YAAY,KAAK,EAAE;AACxB,YAAA,MAAM,IAAI,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;AAC9B,SAAA;AAAM,aAAA;AACL,YAAA,MAAM,IAAI,KAAK,CAAC,+BAA+B,GAAG,CAAA,CAAE,CAAC,CAAC;AACvD,SAAA;AACF,KAAA;AAED,IAAA,OAAO,aAAa,CAAC;AACvB,CAAC,CAAC;AAEF,mBAAe,iBAAiB,CAAoB,UAAU,CAAC;;ACvC/D;;;;;;AAMG;AACH,MAAM,UAAU,GAAG,CACjB,IAAe,EACf,MAAe,EACf,WAAA,GAAiC,EAAE,KACzB;AACV;;;;AAIK;AACL,IAAA,IAAI,CAAC,MAAM;QAAE,MAAM,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC,MAAM,IAAI,SAAS,EAAE,CAAC;IAE7D,MAAM,WAAW,mCACZ,WAAW,CAAA,EAAA,EACd,SAAS,EAAE,SAAS,GACrB,CAAC;AAEF,IAAA,IAAI,aAAa,CAAC;IAElB,IAAI;QACF,aAAa,GAAGA,gBAAc,CAAC,IAAI,EAAE,MAAM,EAAE,WAAW,CAAC,CAAC;AAC3D,KAAA;AAAC,IAAA,OAAO,GAAG,EAAE;QACZ,IAAI,GAAG,YAAY,KAAK,EAAE;AACxB,YAAA,MAAM,IAAI,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;AAC9B,SAAA;AAAM,aAAA;AACL,YAAA,MAAM,IAAI,KAAK,CAAC,+BAA+B,GAAG,CAAA,CAAE,CAAC,CAAC;AACvD,SAAA;AACF,KAAA;AAED,IAAA,OAAO,aAAa,CAAC;AACvB,CAAC,CAAC;AAEF,mBAAe,iBAAiB,CAAoB,UAAU,CAAC;;AC9C/D;;;;;;AAMG;AACH,MAAM,iBAAiB,GAAG,CACxB,MAAc,EACd,WAA0C,GAAA,EAAE,KAClC;AACV;;;;AAIK;AACL,IAAA,IAAI,CAAC,MAAM;QAAE,MAAM,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC,MAAM,IAAI,SAAS,EAAE,CAAC;AAE7D,IAAA,IAAI,SAAS,CAAC;IAEd,IAAI,CAAC,WAAW,CAAC,OAAO;AAAE,QAAA,WAAW,CAAC,OAAO,GAAG,MAAM,CAAC;IAEvD,IAAI;QACF,MAAM,SAAS,GAAG,IAAI,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC;AAC/D;;;;AAIG;AACH,QAAA,MAAM,UAAU,GAAG,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;AACxC,QAAA,SAAS,GAAG,SAAS,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;AAC1C,KAAA;AAAC,IAAA,OAAO,GAAG,EAAE;QACZ,IAAI,GAAG,YAAY,KAAK,EAAE;AACxB,YAAA,MAAM,IAAI,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;AAC9B,SAAA;AAAM,aAAA;AACL,YAAA,MAAM,IAAI,KAAK,CAAC,+BAA+B,GAAG,CAAA,CAAE,CAAC,CAAC;AACvD,SAAA;AACF,KAAA;;IAGD,MAAM,QAAQ,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,KAC9C,IAAI,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC,MAAM,CACjD,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CACzB,CACF,CAAC;IAEF,MAAM,aAAa,GAAG,QAAQ,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;AAClD,IAAA,IAAI,aAAa,KAAK,CAAC,CAAC,EAAE;AACxB,QAAA,MAAM,IAAI,KAAK,CAAC,+CAA+C,CAAC,CAAC;AAClE,KAAA;AAED,IAAA,OAAO,QAAQ,CAAC,CAAC,aAAa,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;AAC3C,CAAC,CAAC;AAEF,0BAAe,iBAAiB,CAA2B,iBAAiB,CAAC;;ACtD7E;;;;;AAKG;AACH,MAAM,UAAU,GAAG,CAAC,IAAe,KAAY;IAC7C,IAAI;QACF,OAAO,IAAI,KAAK,QAAQ,GAAG,IAAI,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC;AAC3E,IAAA,OAAO,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;AAC9C,CAAC,CAAC;AAEF,mBAAe,iBAAiB,CAAoB,UAAU,CAAC;;ACV/D;;;;;;;;;;;AAWG;AACH,MAAM,eAAe,GAAG,CACtB,IAAe,EACf,QAAsB,GAAA,IAAI,IAAI,EAAE,EAChC,MAAe,EACf,WAA4C,KAClC;IACV,IAAI;QACF,OAAO,IAAI,KAAK,QAAQ,GAAG,IAAI,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC;IAE3E,QAAQ;QACN,OAAO,QAAQ,KAAK,QAAQ;cACxB,IAAI,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;AAClC,cAAE,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC;AACzB;;;;AAIK;AACL,IAAA,IAAI,CAAC,MAAM;QAAE,MAAM,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC,MAAM,IAAI,SAAS,EAAE,CAAC;AAE7D,IAAA,MAAM,aAAa,GAAG,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,QAAQ,CAAC,OAAO,EAAE,IAAI,IAAI,CAAC;;IAGnE,MAAM,MAAM,GAAG,EAAE,CAAC;AAClB,IAAA,MAAM,IAAI,GAAG,MAAM,GAAG,EAAE,CAAC;AACzB,IAAA,MAAM,GAAG,GAAG,IAAI,GAAG,EAAE,CAAC;AACtB,IAAA,MAAM,IAAI,GAAG,GAAG,GAAG,CAAC,CAAC;AACrB,IAAA,MAAM,KAAK,GAAG,GAAG,GAAG,EAAE,CAAC;AACvB,IAAA,MAAM,IAAI,GAAG,GAAG,GAAG,GAAG,CAAC;AAEvB,IAAA,IAAI,KAAa,CAAC;AAClB,IAAA,IAAI,IAAiC,CAAC;IAEtC,IAAI,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,GAAG,MAAM,EAAE;QACpC,KAAK,GAAG,aAAa,CAAC;QACtB,IAAI,GAAG,QAAQ,CAAC;AACjB,KAAA;SAAM,IAAI,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,GAAG,IAAI,EAAE;AACzC,QAAA,KAAK,GAAG,aAAa,GAAG,MAAM,CAAC;QAC/B,IAAI,GAAG,QAAQ,CAAC;AACjB,KAAA;SAAM,IAAI,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,GAAG,GAAG,EAAE;AACxC,QAAA,KAAK,GAAG,aAAa,GAAG,IAAI,CAAC;QAC7B,IAAI,GAAG,MAAM,CAAC;AACf,KAAA;SAAM,IAAI,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,GAAG,IAAI,EAAE;AACzC,QAAA,KAAK,GAAG,aAAa,GAAG,GAAG,CAAC;QAC5B,IAAI,GAAG,KAAK,CAAC;AACd,KAAA;SAAM,IAAI,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,GAAG,KAAK,EAAE;AAC1C,QAAA,KAAK,GAAG,aAAa,GAAG,IAAI,CAAC;QAC7B,IAAI,GAAG,MAAM,CAAC;AACf,KAAA;SAAM,IAAI,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,GAAG,IAAI,EAAE;AACzC,QAAA,KAAK,GAAG,aAAa,GAAG,KAAK,CAAC;QAC9B,IAAI,GAAG,OAAO,CAAC;AAChB,KAAA;AAAM,SAAA;AACL,QAAA,KAAK,GAAG,aAAa,GAAG,IAAI,CAAC;QAC7B,IAAI,GAAG,MAAM,CAAC;AACf,KAAA;AAED,IAAA,IAAI,YAAY,CAAC;IAEjB,IAAI;QACF,MAAM,GAAG,GAAG,IAAI,IAAI,CAAC,kBAAkB,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC;AAC7D,QAAA,YAAY,GAAG,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC,CAAC;AACpD,KAAA;AAAC,IAAA,OAAO,GAAG,EAAE;QACZ,IAAI,GAAG,YAAY,KAAK,EAAE;AACxB,YAAA,MAAM,IAAI,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;AAC9B,SAAA;AAAM,aAAA;AACL,YAAA,MAAM,IAAI,KAAK,CAAC,+BAA+B,GAAG,CAAA,CAAE,CAAC,CAAC;AACvD,SAAA;AACF,KAAA;AAED,IAAA,OAAO,YAAY,CAAC;AACtB,CAAC,CAAC;AAEF,wBAAe,iBAAiB,CAAyB,eAAe,CAAC;;ACtFzE;;;;;AAKG;AACH,MAAM,OAAO,GAAG,CAAC,IAAe,KAAY;IAC1C,IAAI;QACF,OAAO,IAAI,KAAK,QAAQ,GAAG,IAAI,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC;AAC3E,IAAA,MAAM,cAAc,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;AAC1D,IAAA,MAAM,cAAc,GAAG,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,cAAc,CAAC,OAAO,EAAE,IAAI,QAAQ,CAAC;AAC9E,IAAA,OAAO,IAAI,CAAC,IAAI,CAAC,CAAC,cAAc,GAAG,cAAc,CAAC,MAAM,EAAE,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC;AACvE,CAAC,CAAC;AAEF,gBAAe,iBAAiB,CAAiB,OAAO,CAAC;;ACbzD;;;;;;AAMG;AACH,MAAM,WAAW,GAAG,CAClB,MAAe,EACf,WAA0C,GAAA,EAAE,KAChC;IACZ,IAAI;AACF;;;;AAIK;AACL,QAAA,IAAI,CAAC,MAAM;YAAE,MAAM,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC,MAAM,IAAI,SAAS,EAAE,CAAC;QAC7D,IAAI,CAAC,WAAW,CAAC,OAAO;AAAE,YAAA,WAAW,CAAC,OAAO,GAAG,MAAM,CAAC;QAEvD,MAAM,SAAS,GAAG,IAAI,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC;AAE/D;;;;;AAKK;AACL,QAAA,OAAO,KAAK,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,KACpC,SAAS,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAC3C,CAAC;AACH,KAAA;AAAC,IAAA,OAAO,GAAG,EAAE;QACZ,IAAI,GAAG,YAAY,KAAK,EAAE;AACxB,YAAA,MAAM,IAAI,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;AAC9B,SAAA;AAAM,aAAA;AACL,YAAA,MAAM,IAAI,KAAK,CAAC,+BAA+B,GAAG,CAAA,CAAE,CAAC,CAAC;AACvD,SAAA;AACF,KAAA;AACH,CAAC,CAAC;AAEF,oBAAe,iBAAiB,CAAqB,WAAW,CAAC;;ACzCjE;;;;;AAKG;AACH,MAAM,OAAO,GAAG,CAAC,KAAgB,EAAE,KAAgB,KAAa;IAC9D,KAAK;QACH,OAAO,KAAK,KAAK,QAAQ,GAAG,IAAI,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC;IAC9E,KAAK;QACH,OAAO,KAAK,KAAK,QAAQ,GAAG,IAAI,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC;AAE9E,IAAA,MAAM,QAAQ,GAAS,KAAK,YAAY,IAAI,GAAG,KAAK,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC;AACvE,IAAA,MAAM,QAAQ,GAAS,KAAK,YAAY,IAAI,GAAG,KAAK,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC;IACvE,OAAO,QAAQ,GAAG,QAAQ,CAAC;AAC7B,CAAC,CAAC;AAEF,gBAAe,iBAAiB,CAAiB,OAAO,CAAC;;ACjBzD;;;;;AAKG;AACH,MAAM,QAAQ,GAAG,CAAC,KAAgB,EAAE,KAAgB,KAAa;IAC/D,KAAK;QACH,OAAO,KAAK,KAAK,QAAQ,GAAG,IAAI,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC;IAC9E,KAAK;QACH,OAAO,KAAK,KAAK,QAAQ,GAAG,IAAI,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC;AAE9E,IAAA,MAAM,QAAQ,GAAS,KAAK,YAAY,IAAI,GAAG,KAAK,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC;AACvE,IAAA,MAAM,QAAQ,GAAS,KAAK,YAAY,IAAI,GAAG,KAAK,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC;IACvE,OAAO,QAAQ,GAAG,QAAQ,CAAC;AAC7B,CAAC,CAAC;AAEF,iBAAe,iBAAiB,CAAkB,QAAQ,CAAC;;ACnB3D;;;;;AAKG;AACH,MAAM,UAAU,GAAG,CAAC,IAAY,KAAa;AAC3C,IAAA,OAAO,CAAC,IAAI,GAAG,CAAC,KAAK,CAAC,IAAI,IAAI,GAAG,GAAG,KAAK,CAAC,KAAK,IAAI,GAAG,GAAG,KAAK,CAAC,CAAC;AAClE,CAAC,CAAC;AAEF,mBAAe,iBAAiB,CAAoB,UAAU,CAAC;;ACT/D;;;;;;AAMG;AACH,MAAM,SAAS,GAAG,CAAC,KAAW,EAAE,KAAW,KAAa;IACtD,KAAK;QACH,OAAO,KAAK,KAAK,QAAQ,GAAG,IAAI,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC;IAC9E,KAAK;QACH,OAAO,KAAK,KAAK,QAAQ,GAAG,IAAI,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC;IAE9E,QACE,KAAK,CAAC,OAAO,EAAE,KAAK,KAAK,CAAC,OAAO,EAAE;AACnC,QAAA,KAAK,CAAC,QAAQ,EAAE,KAAK,KAAK,CAAC,QAAQ,EAAE;QACrC,KAAK,CAAC,WAAW,EAAE,KAAK,KAAK,CAAC,WAAW,EAAE,EAC3C;AACJ,CAAC,CAAC;AAEF,kBAAe,iBAAiB,CAAmB,SAAS,CAAC;;ACpB7D;;;;;AAKG;AACH,MAAM,WAAW,GAAG,CAAC,IAAS,KAAa;IACzC,IAAI;QACF,IAAI;YACF,OAAO,IAAI,KAAK,QAAQ,GAAG,IAAI,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC;AAC5E,KAAA;AAAC,IAAA,OAAO,GAAG,EAAE;QACZ,IAAI,GAAG,YAAY,KAAK,EAAE;AACxB,YAAA,MAAM,IAAI,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;AAC9B,SAAA;AAAM,aAAA;AACL,YAAA,MAAM,IAAI,KAAK,CAAC,+BAA+B,GAAG,CAAA,CAAE,CAAC,CAAC;AACvD,SAAA;AACF,KAAA;AAED,IAAA,OAAO,IAAI,YAAY,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;AACxD,CAAC,CAAC;AAEF,oBAAe,iBAAiB,CAAqB,WAAW,CAAC;;ACxB1D,MAAM,yBAAyB,GAAG;IACvC,KAAK;IACL,WAAW;IACX,KAAK;IACL,kBAAkB;IAClB,MAAM;IACN,QAAQ;IACR,OAAO;IACP,aAAa;IACb,QAAQ;IACR,UAAU;IACV,SAAS;IACT,MAAM;IACN,UAAU;CACF;;ACFV;;;;;;;;AAQG;AACH,MAAM,aAAa,GAAG,CACpB,SAAoB,EACpB,cAA0C,EAAE,EAC5C,MAAe,KACG;;AAElB,IAAA,MAAM,IAAI,GACR,OAAO,SAAS,KAAK,QAAQ;UACzB,IAAI,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;AACnC,UAAE,IAAI,IAAI,CAAC,SAAS,CAAC,CAAC;;AAG1B,IAAA,MAAM,GAAG,MAAM,IAAI,KAAK,CAAC,QAAQ,EAAE,CAAC,MAAM,IAAI,SAAS,EAAE,CAAC;IAE1D,IAAI;;QAEF,MAAM,cAAc,GAAG,IAAI,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC;QACpE,MAAM,cAAc,GAAG,cAAc,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;QAC1D,MAAM,YAAY,GAAyB,EAAE,CAAC;;QAG9C,IAAI,IAAI,GAAG,CAAC,EACV,KAAK,GAAG,CAAC;QACT,GAAG,GAAG,CAAC;QACP,KAAK,GAAG,CAAC,EACT,OAAO,GAAG,CAAC,EACX,OAAO,GAAG,CAAC,CAAC;;AAGd,QAAA,cAAc,CAAC,OAAO,CAAC,CAAC,IAAI,KAAI;;;YAG9B,IAAI,yBAAyB,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;;gBAEjD,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,KAAK,CAAC;AACxE,aAAA;;YAGD,MAAM,KAAK,GAAG,QAAQ,CAAC,IAAI,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;YACvC,QAAQ,IAAI,CAAC,IAAI;AACf,gBAAA,KAAK,MAAM;oBACT,IAAI,GAAG,KAAK,CAAC;oBACb,MAAM;AACR,gBAAA,KAAK,OAAO;AACV,oBAAA,KAAK,GAAG,KAAK,CAAC;oBACd,MAAM;AACR,gBAAA,KAAK,KAAK;oBACR,GAAG,GAAG,KAAK,CAAC;oBACZ,MAAM;AACR,gBAAA,KAAK,MAAM;oBACT,KAAK,GAAG,KAAK,CAAC;oBACd,MAAM;AACR,gBAAA,KAAK,QAAQ;oBACX,OAAO,GAAG,KAAK,CAAC;oBAChB,MAAM;AACR,gBAAA,KAAK,QAAQ;oBACX,OAAO,GAAG,KAAK,CAAC;oBAChB,MAAM;AACR,gBAAA;;oBAEE,MAAM;AACT,aAAA;AACH,SAAC,CAAC,CAAC;;AAGH,QAAA,MAAM,UAAU,GAAG,IAAI,IAAI,CAAC,IAAI,EAAE,KAAK,GAAG,CAAC,EAAE,GAAG,EAAE,KAAK,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;;AAG3E,QAAA,IAAI,KAAK,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC,EAAE;AAC/B,YAAA,MAAM,IAAI,KAAK,CAAC,cAAc,CAAC,CAAC;AACjC,SAAA;;AAGD,QAAA,OAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACK,YAAY,CAAA,EAAA,EACf,QAAQ,EAAE,cAAc,EACxB,aAAa,EAAE,cAAc,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,EAC1D,OAAO,EAAE,UAAU,EACnB,CAAA,CAAA;AACH,KAAA;AAAC,IAAA,OAAO,GAAG,EAAE;;QAEZ,IAAI,GAAG,YAAY,KAAK,EAAE;AACxB,YAAA,MAAM,GAAG,CAAC;AACX,SAAA;AAAM,aAAA;AACL,YAAA,MAAM,IAAI,KAAK,CAAC,8BAA8B,GAAG,CAAA,CAAE,CAAC,CAAC;AACtD,SAAA;AACF,KAAA;AACH,CAAC,CAAC;AAEF,sBAAe,iBAAiB,CAAuB,aAAa,CAAC;;ACzGrE;;;;;;;AAOG;AACH,MAAM,QAAQ,GAAG,CACf,IAAe,EACf,KAAa,EACb,IAAiC,KACzB;IACR,IAAI;QACF,OAAO,IAAI,KAAK,QAAQ,GAAG,IAAI,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC;IAE3E,OAAOC,KAAG,CAAC,IAAI,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;AACjC,CAAC,CAAC;AAEF,iBAAe,iBAAiB,CAAkB,QAAQ,CAAC;;;;"}