{"version":3,"file":"index.js","sources":["../../../src/modules/phoneNumber/data/phoneRegexMapper.ts","../../../src/common/errorBoundary/index.ts","../../../src/modules/phoneNumber/data/dialCodeMapper.ts","../../../src/modules/phoneNumber/utils.ts","../../../src/modules/phoneNumber/isValidPhoneNumber.ts","../../../src/modules/phoneNumber/data/phoneFormatterMapper.ts","../../../src/modules/phoneNumber/formatPhoneNumber.ts","../../../src/modules/phoneNumber/parsePhoneNumber.ts"],"sourcesContent":["export const PHONE_REGEX_MAPPER: { [key: string]: RegExp } = {\n  IN: /^(?:(?:\\+|0{0,2})91\\s*[-]?\\s*|[0]?)?[6789]\\d{9}$/,\n  MY: /^(\\+?6?0)?(\\d{1,3})[-. ]?(\\d{7,8})$/,\n  AE: /^(?:\\+?971|0)?(?:2|3|4|6|7|9)\\d{8}$/,\n  AL: /^(?:\\+?355)?(?:[4-9]\\d{7}|6\\d{8})$/,\n  AM: /^(?:\\+?374)?(?:[0-9]{8}|[0-9]{6}[0-9]{2})$/,\n  AR: /^(?:(?:\\+|0{0,2})54)?(?:11|[2368]\\d)(?:(?=\\d{0,2}15)\\d{2})??\\d{8}$/,\n  AU: /^(?:\\+?61|0)4\\d{8}$/,\n  AW: /^(?:(?:\\+297)?(?!0)\\d{7})$/,\n  BB: /^(?:(?:\\+1)?246)?(?:\\d{3})?\\d{7}$/,\n  BD: /^(?:\\+?880|0)1[13456789]\\d{8}$/,\n  BM: /^(?:(?:\\+1)?441)?(?:\\d{2})?\\d{7}$/,\n  BN: /^(?:\\+?673)?(?:\\d{3})?\\d{4}$/,\n  BO: /^(?:(?:\\+|0{0,2})591)?(?:(?:2|3|7|6)\\d{7})$/,\n  BS: /^(?:(?:\\+1)?242)?(?:\\d{3})?\\d{7}$/,\n  BW: /^(?:(?:\\+267)?\\s?)?[74]\\d{7}$/,\n  BZ: /^(?:(?:\\+501)?\\s?)?[622]\\d{4}$/,\n  CH: /^(?:(?:\\+41|0)(?:\\s*\\(?0\\)?\\s*))?(?:\\d{2}\\s*)?\\d{3}\\s*\\d{2}\\s*\\d{2}$/,\n  CN: /^(?:(?:\\+|00)86)?1\\d{10}$/,\n  CO: /^(?:(?:\\+57|0057)?)?[1-8]{1}\\d{6,7}$/,\n  OM: /^(?:\\+?968)?(?:95|96|97|98)\\d{6}$/,\n  CR: /^(?:(?:\\+506)?\\s*|0)?[1-9]\\d{7}$/,\n  CU: /^(?:\\+?53)?(?:[5-8]\\d{7})$/,\n  CZ: /^(?:\\+?420)?(?:\\d{9})$/,\n  DK: /^(?:\\+?45)?(?:\\d{8})$/,\n  DO: /^(?:(?:\\+1)?809|1-8(?:00|88|89))(?:\\d{7})$/,\n  DZ: /^(?:\\+?213|0)([567]\\d{8})$/,\n  EG: /^(?:(?:\\+20|20)?(\\d{10}))$/,\n  ET: /^(?:\\+?251)?[1-59]\\d{8}$/,\n  EU: /^(?:(?:\\+?3)?8)?\\s*(?:\\d{3}\\s*){3}\\d{2}$/,\n  FJ: /^(?:(?:\\+?679)?\\s?\\d{3}\\s?\\d{4})?$/,\n  GB: /^(?:(?:\\+44\\s?|0)7\\d{3}(\\s?\\d{4,})?)$/,\n  GH: /^(?:(?:\\+233)|0)?(?:\\d{9})$/,\n  GI: /^(?:\\+350)?\\d{5}$/,\n  GM: /^(?:\\+220)?\\d{5,7}$/,\n  GT: /^(?:\\+502)?[2468]\\d{7,8}$/,\n  GY: /^(?:(?:\\+592)?(?:(?:\\s)?[2-9])(?:(?:\\s)?\\d))?(?:(?:\\s)?\\d{4})$/,\n  HK: /^(?:\\+852\\s?)?[456789]\\d{3}\\s?\\d{4}$/,\n  HN: /^(?:\\+504)?[89]\\d{7}$/,\n  HR: /^(?:\\+?385)?\\d{8,9}$/,\n  HT: /^(?:\\+?509)?\\d{8}$/,\n  HU: /^(?:(?:\\+36))(\\s?\\d{2}\\s?\\d{3}\\s?\\d{4})$/,\n  ID: /^(?:\\+?62|0[1-9])[\\s-]?\\d{2,4}[\\s-]?\\d{3,4}[\\s-]?\\d{3,4}$/,\n  IL: /^(?:(?:\\+972|0)(?:-)?)[23489]\\d{7}$/,\n  JM: /^(?:(?:\\+1876))\\d{7,10}$/,\n  KE: /^(?:(?:\\+254)|(?:0))(?:\\d{6,7})$/,\n  KG: /^(?:\\+996)?\\s?\\d{9}$/,\n  KH: /^(?:(?:\\+855)|(?:0))(?:\\s?[1-9]\\d{7,8})$/,\n  KY: /^(?:\\+?1\\s?(345))\\d{6}$/,\n  KZ: /^(?:\\+?7|8)?7\\d{9}$/,\n  LA: /^(?:(?:\\+?856)|0)(20\\d{7,9})$/,\n  LK: /^(?:(?:\\+94)|0)(?:\\d{9})$/,\n  LR: /^(?:\\+231)[ -\\d]{4}[ -\\d]{4}$/,\n  LS: /^(?:(?:\\+?266)|0)?[56]\\d{7}$/,\n  MA: /^(?:(?:\\+?212(\\s*[-|\\s*]?\\d{1,9})?)|(?:0))(?:\\d{9})$/,\n  MD: /^(?:(?:\\+373)|(?:0))(?:\\d{7,8})$/,\n  MK: /^(?:\\+389|0)(?:(?:2[0-4]|[3-9])\\s?)?\\d{6}$/,\n  MM: /^(?:(?:\\+?95)|0)?[1-9]\\d{9}$/,\n  MN: /^(?:\\+976|0)\\d{8}$/,\n  MO: /^(?:(?:\\+?853)|[0-9])?\\d{8}$/,\n  MU: /^(?:\\+230|0)?\\d{8}$/,\n  MV: /^(?:(?:\\+?960)|0)?\\d{7}$/,\n  MW: /^(?:\\+265)[1-9]\\d{6}$/,\n  MX: /^(?:(?:\\+?52)?\\s?(?:1|01)?\\s?)?(?:\\d{3}\\s?\\d{3}\\s?\\d{4})$/,\n  NA: /^(?:(?:\\+264)|0)?\\d{8}$/,\n  NG: /^(?:(?:\\+234)|(?:0))(?:\\d{7,8})$/,\n  NI: /^(?:(?:\\+505))?(?:\\d{8})$/,\n  NO: /^(?:(?:\\+?47)|\\d{2}|\\d{3})\\s?\\d{2}\\s?\\d{3}$/,\n  NP: /^(?:(?:\\+977))?(\\d{9,10})$/,\n  NZ: /^(?:\\+?64|0)(\\d{2,5} \\d{4,8}|\\d{3,4} \\d{4})$/,\n  PE: /^(?:(?:\\+51)|0)?(?:9\\d{8})$/,\n  PG: /^(?:\\+?675)?(?:[7-9]\\d{7})$/,\n  PH: /^(?:(?:\\+?63)|0)(?:\\d{10})$/,\n  PK: /^(?:(?:\\+92)|0)?[345]\\d{9}$/,\n  QA: /^(?:\\+?974)?-?33\\d{5}$/,\n  RU: /^(?:\\+?7|8)?[ -]?\\(?9\\d{2}\\)?[ -]?\\d{3}[ -]?\\d{2}[ -]?\\d{2}$/,\n  SA: /^(?:\\+?966)?\\s?1?[\\s-]?(?:[45]\\d{2}|5\\d{3})[\\s-]?\\d{4}$/,\n  SC: /^(?:(?:\\+248)|\\d{4})\\d{5}$/,\n  SE: /^(?:\\+?46|0)\\s?[1-57-9](?:[0-9]\\s?){8}$/,\n  SG: /^(?:(?:\\+65)|(?:\\(\\+65\\))|(?:65))\\d{4}\\d{4}$/,\n  SL: /^(?:(?:\\+232)|(?:0))?\\d{9}$/,\n  SO: /^(?:\\+252|0)?[567]\\d{7}$/,\n  SS: /^(?:\\+211|0)?[1-9]\\d{7,9}$/,\n  SV: /^(?:(?:\\+?503)|(?:0))(?:\\d{8})$/,\n  SZ: /^(?:\\+?268)?\\d{7,8}$/,\n  TH: /^(?:(?:\\+66)|0)\\d{9}$/,\n  TT: /^(?:(?:\\+?1-868)|\\(?868\\)?)(\\d{7})$/,\n  TZ: /^(?:(?:\\+?255)|0)?[67]\\d{8}$/,\n  US: /^(\\+\\d{1,2}\\s?)?([2-9]{1}\\d{2}[2-9]{1}\\d{6})$/,\n  CA: /^(\\+\\d{1,2}\\s?)?([2-9]{1}\\d{2}[2-9]{1}\\d{6})$/,\n  UY: /^(?:(?:\\+598|0)\\s?(9\\d{3}|2\\d{2}|[4-9]\\d{6}))$/,\n  UZ: /^(?:\\+?998)?\\s?[3456789]\\d{8}$/,\n  YE: /^(?:\\+?967)?(?:\\d{7,8})$/,\n  ZA: /^(?:(?:\\+27)|0)(\\d{9})$/,\n  KW: /^(?:\\+?965)[569]\\d{7}$/,\n  BH: /^(?:\\+?973)?[356]\\d{7}$/,\n  TL: /^(?:(?:\\+670)\\s?)?[0-9]{3}\\s?[0-9]{3,4}$/,\n  VC: /^(?:(?:\\+1)?784)?(?:\\d{3})?\\d{7}$/,\n  VE: /^(?:(?:\\+58)|0)?4\\d{9}$/,\n  VN: /^(?:(?:\\+84)|0)?[1-9]\\d{8}$/,\n  ZM: /^(?:(?:\\+260)|0)?[123456789]\\d{8,9}$/,\n  ZW: /^(?:(?:\\+263)|0)?(?:\\d{9,10})$/,\n  LT: /^(?:(?:\\+370)|8)\\d{8}$/,\n  LU: /^(?:(?:\\+352)?(6|2(6|7|8|9))\\d{6})$/,\n  LV: /^(?:(?:\\+371)?2\\d{7})$/,\n  ME: /^(?:(?:\\+382)?[67]\\d{7,20})$/,\n  MG: /^(?:(?:\\+261)?3[234568]\\d{7})$/,\n  MZ: /^(?:(?:\\+258)|(?:258))?8[234567]\\d{7,8}$/,\n  NL: /^(?:(?:\\+31)|0(6(?:\\d{8})|[1-9](?:(?:\\d{8})|(?:\\s\\d{3}\\s\\d{4}))|(?:\\d{8})))$/,\n  PA: /^(?:(?:\\+507)\\s?)?[46]\\d{6,7}$/,\n  PL: /^(?:(?:\\+48)?(?:\\s?\\d{3}\\s?\\d{3}\\s?\\d{3}|(?:\\d{2}\\s?){4}\\d{2}|\\d{3}-\\d{3}-\\d{3}))$/,\n  PR: /^(?:(?:\\+1)?787|939)\\d{7}$/,\n  PS: /^(?:(?:\\+970))(5[2349])\\d{7}$/,\n  PT: /^(?:(?:\\+351)?9(1\\d|2[1-9]|6[12345789]|7[12345789])\\d{7})$/,\n  PY: /^(?:(?:\\+595|0)9[9876]\\d{7})$/,\n  RO: /^(?:(?:\\+40|0))(?:7[2-8]\\d{7}|21\\d{8})$/,\n  RS: /^(?:(?:\\+381)|0)([0-6]|[7][012345])[0-9]{5,10}$/,\n  RW: /^(?:(?:\\+250)|(0))\\d{9}$/,\n  SI: /^(?:(?:\\+386)|0)?[1-59]\\d{7,8}$/,\n  SK: /^(?:(?:\\+421))?(0|9[0-8])\\d{8}$/,\n  SM: /^(?:(?:\\+378)|(0549|6\\d{4}))\\d{5}$/,\n  SN: /^(?:(?:\\+221)|0)?[3679]\\d{7}$/,\n  SR: /^(?:(?:\\+597))\\d{7}$/,\n  TG: /^(?:(?:\\+228))\\d{8}$/,\n  TJ: /^(?:(?:\\+992))(37|55|77)\\d{7}$/,\n  TN: /^(?:(?:\\+216)|22|9[1-9])\\d{7}$/,\n  TR: /^(?:(?:\\+90)|(0))\\s?5\\d{9}$/,\n  TW: /^(?:(?:\\+886)|0)?9\\d{8}$/,\n  UA: /^(?:(?:\\+380)|(0))?(39|50|63|66|67|68|91|92|93|94|95|96|97|98|99)\\d{7}$/,\n  UG: /^(?:(?:\\+256)|0)?[39]\\d{8}$/,\n};\n","// Custom Error class to extend properties to error object\nexport class I18nifyError extends Error {\n  timestamp: Date;\n  constructor(message: string | undefined) {\n    super(message);\n    this.name = 'i18nify Error';\n    this.timestamp = new Date();\n    // more params like type of error/severity can be added in future for better debugging.\n  }\n}\n\n/**\n * withErrorBoundary is a higher order function that takes function as parameter and wraps it in try/catch block.\n * It appends additional attributes and serves as a centralized error-handling service.\n * Usage =>\n * const wrappedUtilityFn = withErrorBoundary(utilityFn)\n *\n * @param fn utility that is wrapped in error boundary\n * @returns {Function} returns the function wrapped in try/catch block\n */\nexport const withErrorBoundary = <T extends (...args: any[]) => any>(\n  fn: T,\n): ((...args: Parameters<T>) => ReturnType<T>) => {\n  return function (this: unknown, ...rest: Parameters<T>): ReturnType<T> {\n    try {\n      return fn.call(this, ...rest) as ReturnType<T>;\n    } catch (err) {\n      console.warn('[I18N Error]: ', err);\n      // Currently, we are throwing the error as it is to consumers.\n      // In the future, this can be modified as per our requirement, like an error logging service.\n      throw new I18nifyError(err as string | undefined);\n    }\n  };\n};\n","/*  Source: Google LibPhoneNumber Metadata: https://github.com/google/libphonenumber/blob/master/javascript/i18n/phonenumbers/metadata.js  */\n\nexport const DIAL_CODE_MAPPER: { [key: number]: string[] } = {\n  1: [\n    'US',\n    'AG',\n    'AI',\n    'AS',\n    'BB',\n    'BM',\n    'BS',\n    'CA',\n    'DM',\n    'DO',\n    'GD',\n    'GU',\n    'JM',\n    'KN',\n    'KY',\n    'LC',\n    'MP',\n    'MS',\n    'PR',\n    'SX',\n    'TC',\n    'TT',\n    'VC',\n    'VG',\n    'VI',\n  ],\n  7: ['RU', 'KZ'],\n  20: ['EG'],\n  27: ['ZA'],\n  30: ['GR'],\n  31: ['NL'],\n  32: ['BE'],\n  33: ['FR'],\n  34: ['ES'],\n  36: ['HU'],\n  39: ['IT', 'VA'],\n  40: ['RO'],\n  41: ['CH'],\n  43: ['AT'],\n  44: ['GB', 'GG', 'IM', 'JE'],\n  45: ['DK'],\n  46: ['SE'],\n  47: ['NO', 'SJ'],\n  48: ['PL'],\n  49: ['DE'],\n  51: ['PE'],\n  52: ['MX'],\n  53: ['CU'],\n  54: ['AR'],\n  55: ['BR'],\n  56: ['CL'],\n  57: ['CO'],\n  58: ['VE'],\n  60: ['MY'],\n  61: ['AU', 'CC', 'CX'],\n  62: ['ID'],\n  63: ['PH'],\n  64: ['NZ'],\n  65: ['SG'],\n  66: ['TH'],\n  81: ['JP'],\n  82: ['KR'],\n  84: ['VN'],\n  86: ['CN'],\n  90: ['TR'],\n  91: ['IN'],\n  92: ['PK'],\n  93: ['AF'],\n  94: ['LK'],\n  95: ['MM'],\n  98: ['IR'],\n  211: ['SS'],\n  212: ['MA', 'EH'],\n  213: ['DZ'],\n  216: ['TN'],\n  218: ['LY'],\n  220: ['GM'],\n  221: ['SN'],\n  222: ['MR'],\n  223: ['ML'],\n  224: ['GN'],\n  225: ['CI'],\n  226: ['BF'],\n  227: ['NE'],\n  228: ['TG'],\n  229: ['BJ'],\n  230: ['MU'],\n  231: ['LR'],\n  232: ['SL'],\n  233: ['GH'],\n  234: ['NG'],\n  235: ['TD'],\n  236: ['CF'],\n  237: ['CM'],\n  238: ['CV'],\n  239: ['ST'],\n  240: ['GQ'],\n  241: ['GA'],\n  242: ['CG'],\n  243: ['CD'],\n  244: ['AO'],\n  245: ['GW'],\n  246: ['IO'],\n  247: ['AC'],\n  248: ['SC'],\n  249: ['SD'],\n  250: ['RW'],\n  251: ['ET'],\n  252: ['SO'],\n  253: ['DJ'],\n  254: ['KE'],\n  255: ['TZ'],\n  256: ['UG'],\n  257: ['BI'],\n  258: ['MZ'],\n  260: ['ZM'],\n  261: ['MG'],\n  262: ['RE', 'YT'],\n  263: ['ZW'],\n  264: ['NA'],\n  265: ['MW'],\n  266: ['LS'],\n  267: ['BW'],\n  268: ['SZ'],\n  269: ['KM'],\n  290: ['SH', 'TA'],\n  291: ['ER'],\n  297: ['AW'],\n  298: ['FO'],\n  299: ['GL'],\n  350: ['GI'],\n  351: ['PT'],\n  352: ['LU'],\n  353: ['IE'],\n  354: ['IS'],\n  355: ['AL'],\n  356: ['MT'],\n  357: ['CY'],\n  358: ['FI', 'AX'],\n  359: ['BG'],\n  370: ['LT'],\n  371: ['LV'],\n  372: ['EE'],\n  373: ['MD'],\n  374: ['AM'],\n  375: ['BY'],\n  376: ['AD'],\n  377: ['MC'],\n  378: ['SM'],\n  380: ['UA'],\n  381: ['RS'],\n  382: ['ME'],\n  383: ['XK'],\n  385: ['HR'],\n  386: ['SI'],\n  387: ['BA'],\n  389: ['MK'],\n  420: ['CZ'],\n  421: ['SK'],\n  423: ['LI'],\n  500: ['FK'],\n  501: ['BZ'],\n  502: ['GT'],\n  503: ['SV'],\n  504: ['HN'],\n  505: ['NI'],\n  506: ['CR'],\n  507: ['PA'],\n  508: ['PM'],\n  509: ['HT'],\n  590: ['GP', 'BL', 'MF'],\n  591: ['BO'],\n  592: ['GY'],\n  593: ['EC'],\n  594: ['GF'],\n  595: ['PY'],\n  596: ['MQ'],\n  597: ['SR'],\n  598: ['UY'],\n  599: ['CW', 'BQ'],\n  670: ['TL'],\n  672: ['NF'],\n  673: ['BN'],\n  674: ['NR'],\n  675: ['PG'],\n  676: ['TO'],\n  677: ['SB'],\n  678: ['VU'],\n  679: ['FJ'],\n  680: ['PW'],\n  681: ['WF'],\n  682: ['CK'],\n  683: ['NU'],\n  685: ['WS'],\n  686: ['KI'],\n  687: ['NC'],\n  688: ['TV'],\n  689: ['PF'],\n  690: ['TK'],\n  691: ['FM'],\n  692: ['MH'],\n  800: ['001'],\n  808: ['001'],\n  850: ['KP'],\n  852: ['HK'],\n  853: ['MO'],\n  855: ['KH'],\n  856: ['LA'],\n  870: ['001'],\n  878: ['001'],\n  880: ['BD'],\n  881: ['001'],\n  882: ['001'],\n  883: ['001'],\n  886: ['TW'],\n  888: ['001'],\n  960: ['MV'],\n  961: ['LB'],\n  962: ['JO'],\n  963: ['SY'],\n  964: ['IQ'],\n  965: ['KW'],\n  966: ['SA'],\n  967: ['YE'],\n  968: ['OM'],\n  970: ['PS'],\n  971: ['AE'],\n  972: ['IL'],\n  973: ['BH'],\n  974: ['QA'],\n  975: ['BT'],\n  976: ['MN'],\n  977: ['NP'],\n  979: ['001'],\n  992: ['TJ'],\n  993: ['TM'],\n  994: ['AZ'],\n  995: ['GE'],\n  996: ['KG'],\n  998: ['UZ'],\n};\n","import { DIAL_CODE_MAPPER } from './data/dialCodeMapper';\nimport { PHONE_REGEX_MAPPER } from './data/phoneRegexMapper';\n\n/**\n * Determines the country code based on the provided phone number.\n * This function employs a multi-step approach to identify the country code:\n * - If the phone number starts with '+', it extracts the numeric characters\n *   and matches the leading digits with known dial codes mapped to countries.\n * - For matched dial codes, it further filters based on country-specific regex patterns\n *   to validate the phone number format for those countries.\n * - If the phone number doesn't start with '+', it directly matches the number\n *   against regular expressions associated with various countries to identify the code.\n *\n * @param phoneNumber The input phone number (string or number).\n * @returns The detected country code or an empty string if not found.\n */\nexport const detectCountryCodeFromDialCode = (\n  phoneNumber: string | number,\n): string => {\n  // If the phone number starts with '+', extract numeric characters\n  if (phoneNumber.toString().charAt(0) === '+') {\n    const cleanedPhoneNumberWithoutPlusPrefix = phoneNumber\n      .toString()\n      .replace(/\\D/g, '');\n\n    const matchingCountries: string[] = [];\n\n    // Iterate through dial codes and check for matches with cleaned phone number\n    for (const code in DIAL_CODE_MAPPER) {\n      if (cleanedPhoneNumberWithoutPlusPrefix.startsWith(code)) {\n        matchingCountries.push(...DIAL_CODE_MAPPER[code]);\n      }\n    }\n\n    // Filter matching countries based on phone number validation regex\n    const matchedCountryCode = matchingCountries.find((countryCode: string) => {\n      const regex = PHONE_REGEX_MAPPER[countryCode];\n      if (regex && regex.test(phoneNumber.toString())) return countryCode;\n      return undefined;\n    });\n\n    // Return the first matched country code, if any\n    return matchedCountryCode || '';\n  } else {\n    // If phone number doesn't start with '+', directly match against country regexes\n    for (const countryCode in PHONE_REGEX_MAPPER) {\n      const regex = PHONE_REGEX_MAPPER[countryCode];\n      if (regex.test(phoneNumber.toString())) {\n        return countryCode;\n      }\n    }\n  }\n\n  // Return empty string if no country code is detected\n  return '';\n};\n\nexport const cleanPhoneNumber = (phoneNumber: string) => {\n  // Regular expression to match all characters except numbers and + sign at the start\n  const regex = /[^0-9+]|(?!A)\\+/g;\n  // Replace matched characters with an empty string\n  const cleanedPhoneNumber = phoneNumber.replace(regex, '');\n  return phoneNumber[0] === '+' ? `+${cleanedPhoneNumber}` : cleanedPhoneNumber;\n};\n","import { PHONE_REGEX_MAPPER } from './data/phoneRegexMapper';\nimport { withErrorBoundary } from '../../common/errorBoundary';\nimport { detectCountryCodeFromDialCode, cleanPhoneNumber } from './utils';\n\n// Validates whether a given phone number is valid based on the provided country code or auto-detects the country code and checks if the number matches the defined regex pattern for that country.\nconst isValidPhoneNumber = (\n  phoneNumber: string | number,\n  countryCode?: keyof typeof PHONE_REGEX_MAPPER,\n): boolean => {\n  // Clean the provided phoneNumber by removing non-numeric characters\n  const cleanedPhoneNumber = cleanPhoneNumber(phoneNumber.toString());\n\n  // Detect or validate the country code\n  countryCode =\n    countryCode && countryCode in PHONE_REGEX_MAPPER\n      ? countryCode\n      : detectCountryCodeFromDialCode(cleanedPhoneNumber);\n\n  // Return false if phoneNumber is empty\n  if (!phoneNumber) return false;\n\n  // Check if the countryCode exists in the PHONE_REGEX_MAPPER\n  if (countryCode in PHONE_REGEX_MAPPER) {\n    // Fetch the regex pattern for the countryCode\n    const regex = PHONE_REGEX_MAPPER[countryCode];\n    // Test if the cleanedPhoneNumber matches the regex pattern\n    return regex.test(cleanedPhoneNumber as string);\n  }\n\n  // Return false if the countryCode is not supported\n  return false;\n};\n\nexport default withErrorBoundary<typeof isValidPhoneNumber>(isValidPhoneNumber);\n","export const PHONE_FORMATTER_MAPPER: { [key: string]: string } = {\n  IN: 'xxxx xxxxxx',\n  MY: 'xx xxxxx xx',\n  AE: 'xx xxx xxxx',\n  AL: 'xxx xx xxxx',\n  AM: 'xx xx xx xx',\n  AR: 'xxxx-xxxx',\n  AU: 'xxx xxx xxx',\n  AW: 'xxx-xxxx',\n  BB: 'xxx-xxxx',\n  BD: 'xxxx-xxxxxx',\n  BM: 'xxx-xxxx',\n  BN: 'xxxx-xxxx',\n  BO: 'xxxx-xxxx',\n  BS: 'xxx-xxxx',\n  BW: 'xx xxxx xxxx',\n  BZ: 'xxx-xxxx',\n  CA: 'xxx-xxx-xxxx',\n  CH: 'xxx xxx xxx',\n  CN: 'xxxx-xxxxxxx',\n  CO: 'xxxx-xxxxxxx',\n  CR: 'xxxx-xxxx',\n  CU: 'xxxx-xxxx',\n  CZ: 'xxx xxx xxx',\n  DK: 'xx xx xx xx',\n  DO: 'xxx-xxxxxxx',\n  DZ: 'xxxx-xxxx-xxx',\n  EG: 'xx xxx xxxx',\n  ET: 'xx xxx xxxx',\n  EU: 'xxx xx xx xx',\n  FJ: 'xxxx xxxx',\n  GB: 'xxxx xxx xxx',\n  GH: 'xxx xxx xxxx',\n  GI: 'xxxx xxxx',\n  GM: 'xxxx-xxxx',\n  GT: 'xxxx-xxxx',\n  GY: 'xxx-xxxx',\n  HK: 'xxxx xxxx',\n  HN: 'xxxx-xxxx',\n  HR: 'xxx xxx xxxx',\n  HT: 'xxx-xxxx',\n  HU: 'xxx xxx xxxx',\n  ID: 'xxxx-xxxx-xxxx',\n  IL: 'xxxx-xxx-xxx',\n  JM: 'xxx-xxxx',\n  KE: 'xxx xxxxxx',\n  KG: 'xxx-xx-xx-xx',\n  KH: 'xxx-xxx-xxx',\n  KY: 'xxx-xxxx',\n  KZ: 'xxx-xxx-xx-xx',\n  LA: 'xxx xx xxxx',\n  LK: 'xx xxx xxxx',\n  LR: 'xxx-xxx-xxxx',\n  LS: 'xxx xx xxxx',\n  LT: 'xxx xxxxx',\n  LU: 'xxx xx xxx',\n  LV: 'xxxx xxxx',\n  MA: 'xxxx-xxxxxx',\n  MD: 'xx xxxxxx',\n  ME: 'xx xxxxxx',\n  MG: 'xx xx xx xx xx',\n  MK: 'xx xx xx xx',\n  MM: 'xx xxxxxx',\n  MN: 'xxx-xx-xxxx',\n  MO: 'xxxx xxxx',\n  MU: 'xx xxxx xxxx',\n  MV: 'xxxxxx',\n  MW: 'xx xxxx xxxx',\n  MX: 'xxx-xxx-xxxx',\n  MZ: 'xx xxxxxxx',\n  NA: 'xx xxxx xxxx',\n  NG: 'xxx xxx xxxx',\n  NI: 'xxxx-xxxx',\n  NL: 'xxx-xxxxxxx',\n  NO: 'xxxx xxxx',\n  NP: 'xxxx-xxxxxxx',\n  NZ: 'xxx-xxxxxxx',\n  OM: 'xxxx-xxxx',\n  PA: 'xxx-xxxx',\n  PE: 'xxx-xxx-xxx',\n  PG: 'xxx-xxxxxx',\n  PH: 'xxx-xxxx',\n  PK: 'xxx-xxxxxxx',\n  PL: 'xxx xxx xxx',\n  PR: 'xxx-xxx-xxxx',\n  PS: 'xxxx-xxxxxxx',\n  PT: 'xxx xxx xxx',\n  PY: 'xxx-xxxxxx',\n  QA: 'xxxx xxxx',\n  RO: 'xxx xxx xxxx',\n  RS: 'xxx xxxxx',\n  RU: 'xxx xxx-xx-xx',\n  RW: 'xxx xxxxxx',\n  SA: 'xxx-xxxxxxx',\n  SC: 'xx xxxxx',\n  SE: 'xxx-xxx xx xx',\n  SG: 'xxxx xxxx',\n  SI: 'xx xxxxxx',\n  SK: 'xxx xxx xxx',\n  SL: 'xxx-xxxxxx',\n  SM: 'xxxxx xxxxx',\n  SN: 'xx xxx xx xx',\n  SO: 'xxx xxxxxxx',\n  SR: 'xxx-xxxx',\n  SS: 'xxx xxxx xxx',\n  SV: 'xxxx-xxxx',\n  SZ: 'xxx xx xxxx',\n  TG: 'xx xx xx xx',\n  TH: 'xxx-xxxxxxx',\n  TJ: 'xxx xx xx xx',\n  TL: 'xxx-xxxxxxx',\n  TN: 'xx xxxxxx',\n  TR: 'xxx xxx xx xx',\n  TT: 'xxx-xxxx',\n  TW: 'xxxx-xxxxxx',\n  TZ: 'xxx xxx xxxx',\n  UA: 'xx xxx xx xx',\n  UG: 'xxx xxxxxxx',\n  US: 'xxx-xxx-xxxx',\n  UY: 'xxx-xxxxx',\n  UZ: 'xxx-xxx-xx-xx',\n  VC: 'xxx-xxxx',\n  VE: 'xxxx-xxx-xxxx',\n  VN: 'xxxx-xxxxxxx',\n  YE: 'xxxx-xxxx',\n  ZA: 'xxx-xxx-xxxx',\n  ZM: 'xxx-xxxxxxx',\n  ZW: 'xx xxx xxxx',\n  KW: 'xxx xx xxxx',\n  BH: 'xxxx xxxx',\n};\n","import { withErrorBoundary } from '../../common/errorBoundary';\nimport { PHONE_FORMATTER_MAPPER } from './data/phoneFormatterMapper';\nimport { detectCountryCodeFromDialCode, cleanPhoneNumber } from './utils';\n\n// Formats a provided phone number according to the predefined format for a specific country code, or auto-detects the country code and formats the number accordingly.\nconst formatPhoneNumber = (\n  phoneNumber: string | number,\n  countryCode?: keyof typeof PHONE_FORMATTER_MAPPER,\n): string => {\n  // Throw errors if phoneNumber is invalid\n  if (!phoneNumber) throw new Error('Parameter `phoneNumber` is invalid!');\n\n  // Convert phoneNumber to string and clean it by removing non-numeric characters\n  phoneNumber = phoneNumber.toString();\n  phoneNumber = cleanPhoneNumber(phoneNumber);\n\n  // Detect or validate the country code\n  countryCode =\n    countryCode && countryCode in PHONE_FORMATTER_MAPPER\n      ? countryCode\n      : detectCountryCodeFromDialCode(phoneNumber);\n\n  // Fetch the pattern for the countryCode from the PHONE_FORMATTER_MAPPER\n  const pattern = PHONE_FORMATTER_MAPPER[countryCode];\n\n  if (!pattern) return phoneNumber;\n\n  // Count the number of 'x' characters in the format pattern\n  let charCountInFormatterPattern = 0;\n  for (let i = 0; i < pattern.length; i++) {\n    if (pattern[i] === 'x') {\n      charCountInFormatterPattern++;\n    }\n  }\n\n  // Calculate the difference between phoneNumber length and 'x' characters count in pattern\n  const diff = phoneNumber.length - charCountInFormatterPattern;\n  // Extract the phoneNumber without the prefix\n  const phoneNumberWithoutPrefix = phoneNumber.slice(diff);\n  const formattedNumber: string[] = [];\n  let numberIndex = 0;\n\n  // Loop through the pattern to format the phoneNumber\n  for (let i = 0; i < pattern.length; i++) {\n    const patternChar = pattern[i];\n    if (patternChar === 'x') {\n      // Insert phoneNumber digits at 'x' positions\n      if (numberIndex < phoneNumberWithoutPrefix.length) {\n        formattedNumber.push(phoneNumberWithoutPrefix[numberIndex]);\n        numberIndex++;\n      }\n    } else {\n      // Insert non-digit characters from the pattern\n      formattedNumber.push(patternChar);\n    }\n  }\n\n  // Join the formattedNumber array to create the formattedPhoneNumber without prefix\n  const formattedPhoneNumberWithoutPrefix = formattedNumber.join('');\n  // Combine the prefix and formattedPhoneNumberWithoutPrefix\n  const formattedPhoneNumberWithPrefix =\n    phoneNumber.slice(0, diff) + ' ' + formattedPhoneNumberWithoutPrefix;\n\n  // Return the formattedPhoneNumber with prefix after trimming whitespace\n  return formattedPhoneNumberWithPrefix.trim();\n};\n\nexport default withErrorBoundary<typeof formatPhoneNumber>(formatPhoneNumber);\n","import { withErrorBoundary } from '../../common/errorBoundary';\nimport { PHONE_FORMATTER_MAPPER } from './data/phoneFormatterMapper';\nimport formatPhoneNumber from './formatPhoneNumber';\nimport { detectCountryCodeFromDialCode, cleanPhoneNumber } from './utils';\n\ninterface PhoneInfo {\n  countryCode: string;\n  dialCode: string;\n  formattedPhoneNumber: string;\n  formatTemplate: string;\n}\n\n// Parses a given phone number, identifies its country code (if not provided), and returns an object with details including the country code, formatted phone number, dial code, and format template.\nconst parsePhoneNumber = (phoneNumber: string, country?: string): PhoneInfo => {\n  // Throw errors if phoneNumber is invalid\n  if (!phoneNumber) throw new Error('Parameter `phoneNumber` is invalid!');\n\n  // Clean the phoneNumber by removing non-numeric characters\n  phoneNumber = phoneNumber.toString();\n  phoneNumber = cleanPhoneNumber(phoneNumber);\n\n  // Detect or validate the country code\n  const countryCode =\n    country && country in PHONE_FORMATTER_MAPPER\n      ? country\n      : detectCountryCodeFromDialCode(phoneNumber);\n\n  // Format the phone number using the detected/validated country code\n  const formattedPhoneNumber = formatPhoneNumber(phoneNumber, countryCode);\n\n  // Fetch the pattern associated with the countryCode from the PHONE_FORMATTER_MAPPER\n  const pattern = PHONE_FORMATTER_MAPPER[countryCode];\n\n  if (!pattern)\n    return {\n      countryCode: countryCode || '',\n      dialCode: '',\n      formattedPhoneNumber: phoneNumber,\n      formatTemplate: '',\n    };\n\n  // Count the number of 'x' characters in the format pattern\n  let charCountInFormatterPattern = 0;\n  for (let i = 0; i < pattern.length; i++) {\n    if (pattern[i] === 'x') {\n      charCountInFormatterPattern++;\n    }\n  }\n\n  // Calculate the difference between phoneNumber length and 'x' characters count in pattern\n  const diff = phoneNumber.length - charCountInFormatterPattern;\n\n  // Extract the dialCode from the phoneNumber\n  const dialCode = phoneNumber.slice(0, diff);\n\n  // Obtain the format template associated with the countryCode\n  const formatTemplate = PHONE_FORMATTER_MAPPER[countryCode];\n\n  // Return the parsed phone number information\n  return {\n    countryCode,\n    formattedPhoneNumber,\n    dialCode,\n    formatTemplate,\n  };\n};\n\nexport default withErrorBoundary<typeof parsePhoneNumber>(parsePhoneNumber);\n"],"names":["formatPhoneNumber"],"mappings":"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"}