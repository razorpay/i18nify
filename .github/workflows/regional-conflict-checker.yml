name: Regional Conflict Checker

on:
  pull_request:
    types: [opened, synchronize, reopened]
  merge_group:
  workflow_dispatch:
    inputs:
      target_branches:
        description: 'Comma-separated list of regional branches'
        required: false
        default: ''

permissions:
  contents: read
  pull-requests: write
  statuses: write
  actions: read

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  check-regional-conflicts:
    name: Check Regional Conflicts
    runs-on: ubuntu-latest
    
    steps:
      - name: Determine event details
        id: event-details
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "pr_number=${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
            echo "head_ref=${{ github.head_ref }}" >> $GITHUB_OUTPUT
            echo "event_type=pull_request" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "merge_group" ]; then
            echo "pr_number=" >> $GITHUB_OUTPUT
            echo "head_ref=${{ github.event.merge_group.head_ref }}" >> $GITHUB_OUTPUT
            echo "event_type=merge_group" >> $GITHUB_OUTPUT
          else
            echo "pr_number=" >> $GITHUB_OUTPUT
            echo "head_ref=${{ github.ref_name }}" >> $GITHUB_OUTPUT
            echo "event_type=workflow_dispatch" >> $GITHUB_OUTPUT
          fi

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ steps.event-details.outputs.head_ref }}

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Install dependencies
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install requests

      - name: Run Regional Conflict Checker
        id: conflict-check
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          PR_NUMBER: ${{ steps.event-details.outputs.pr_number }}
          HEAD_REF: ${{ steps.event-details.outputs.head_ref }}
          TARGET_BRANCHES_INPUT: ${{ github.event.inputs.target_branches || '' }}
          EVENT_TYPE: ${{ steps.event-details.outputs.event_type }}
          GITHUB_SHA: ${{ github.sha }}
        run: |
          echo "üöÄ Running Regional Conflict Checker POC"
          echo "Event: $EVENT_TYPE | PR: $PR_NUMBER | Branch: $HEAD_REF"
          
          python3 scripts/check_regional_conflicts.py

      - name: Upload results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: conflict-results-${{ steps.event-details.outputs.pr_number || github.run_id }}
          path: conflict_results.json
          retention-days: 7

      - name: Comment on PR
        if: steps.conflict-check.outputs.has-conflicts == 'true' && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const results = JSON.parse(fs.readFileSync('conflict_results.json', 'utf8'));
            
            let comment = `## üö® Regional Conflicts Detected\n\n`;
            comment += `This PR has merge conflicts with **${results.conflict_count}** regional branch(es):\n\n`;
            
            for (const conflict of results.conflicts) {
              comment += `### üî¥ \`${conflict.branch}\`\n`;
              comment += `\`\`\`\n${conflict.details}\n\`\`\`\n\n`;
              
              comment += `**Resolution steps:**\n`;
              comment += `\`\`\`bash\n`;
              comment += `# Create resolution branch for ${conflict.branch}\n`;
              comment += `git checkout origin/${conflict.branch}\n`;
              comment += `git checkout -b resolve-conflicts-${conflict.branch}-pr-${results.pr_number || 'XXX'}\n\n`;
              comment += `# Merge this PR's changes\n`;
              comment += `git merge origin/${results.source_branch}\n`;
              comment += `# Fix conflicts manually, then:\n`;
              comment += `git add .\n`;
              comment += `git commit -m "Resolve conflicts for PR #${results.pr_number || 'XXX'}"\n`;
              comment += `git push origin resolve-conflicts-${conflict.branch}-pr-${results.pr_number || 'XXX'}\n`;
              comment += `\`\`\`\n\n`;
            }
            
            comment += `**Status:** üî¥ **BLOCKED** - Cannot merge until conflicts resolved\n\n`;
            comment += `This PR is blocked from merge queue until all conflicts are resolved.`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Set merge queue status
        if: github.event_name == 'merge_group'
        run: |
          if [ "${{ steps.conflict-check.outputs.has-conflicts }}" = "true" ]; then
            echo "‚ùå Merge queue validation failed - conflicts detected"
            exit 1
          else
            echo "‚úÖ Merge queue validation passed - no conflicts"
            exit 0
          fi
