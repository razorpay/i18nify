import { INTL_MAPPING } from './constants';
import { ByParts } from './types';

/**
 * This function replaces the default parameters like currency symbols, currency codes, etc.,
 * returned by the JavaScript Intl API with custom values provided by a local configuration
 * (i18nify-data). This allows for customization of how different currencies or other locale-specific
 * data are represented, providing greater control over the displayed formatting.
 *
 * @param {ByParts['rawParts']} parts - An array of parts representing the formatted components
 *                                      of a currency amount, as generated by Intl.NumberFormat.
 * @param {string} currencyCode - The currency code (e.g., 'USD', 'EUR') for which the replacement
 *                                values should be applied.
 * @returns {ByParts['rawParts']} - The modified array of parts with replaced values based on the
 *                                  local i18nify configuration.
 */
export const transformPartsFromIntl = (
  parts: ByParts['rawParts'],
  currencyCode: string,
): ByParts['rawParts'] => {
  // Loop through each part of the formatted amount
  for (let i = 0; i < parts.length; i++) {
    const part = parts[i];

    if (part.type === 'currency' && currencyCode in INTL_MAPPING) {
      const mapping = INTL_MAPPING[currencyCode as keyof typeof INTL_MAPPING];
      if ((part.value as any) in mapping) {
        parts[i].value = mapping[part.value as keyof typeof mapping];
        break; // Exit the loop after the first replacement
      }
    }
  }

  return parts;
};
