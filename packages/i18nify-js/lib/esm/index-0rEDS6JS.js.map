{"version":3,"file":"index-0rEDS6JS.js","sources":["../../src/common/errorBoundary/index.ts"],"sourcesContent":["// Custom Error class to extend properties to error object\nexport class I18nifyError extends Error {\n  timestamp: Date;\n  constructor(message: string | undefined) {\n    super(message);\n    this.name = 'i18nify Error';\n    this.timestamp = new Date();\n    // more params like type of error/severity can be added in future for better debugging.\n  }\n}\n\n/**\n * withErrorBoundary is a higher order function that takes function as parameter and wraps it in try/catch block.\n * It appends additional attributes and serves as a centralized error-handling service.\n * Usage =>\n * const wrappedUtilityFn = withErrorBoundary(utilityFn)\n *\n * @param fn utility that is wrapped in error boundary\n * @returns {Function} returns the function wrapped in try/catch block\n */\nexport const withErrorBoundary = <T extends (...args: any[]) => any>(\n  fn: T,\n): ((...args: Parameters<T>) => ReturnType<T>) => {\n  return function (this: unknown, ...rest: Parameters<T>): ReturnType<T> {\n    try {\n      return fn.call(this, ...rest) as ReturnType<T>;\n    } catch (err) {\n      console.warn('[I18N Error]: ', err);\n      // Currently, we are throwing the error as it is to consumers.\n      // In the future, this can be modified as per our requirement, like an error logging service.\n      throw new I18nifyError(err as string | undefined);\n    }\n  };\n};\n"],"names":[],"mappings":"AAAA;AACM,MAAO,YAAa,SAAQ,KAAK,CAAA;AAErC,IAAA,WAAA,CAAY,OAA2B,EAAA;QACrC,KAAK,CAAC,OAAO,CAAC,CAAC;AACf,QAAA,IAAI,CAAC,IAAI,GAAG,eAAe,CAAC;AAC5B,QAAA,IAAI,CAAC,SAAS,GAAG,IAAI,IAAI,EAAE,CAAC;;KAE7B;AACF,CAAA;AAED;;;;;;;;AAQG;AACU,MAAA,iBAAiB,GAAG,CAC/B,EAAK,KAC0C;IAC/C,OAAO,UAAyB,GAAG,IAAmB,EAAA;AACpD,QAAA,IAAI;YACF,OAAO,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,IAAI,CAAkB,CAAC;SAChD;QAAC,OAAO,GAAG,EAAE;AACZ,YAAA,OAAO,CAAC,IAAI,CAAC,gBAAgB,EAAE,GAAG,CAAC,CAAC;;;AAGpC,YAAA,MAAM,IAAI,YAAY,CAAC,GAAyB,CAAC,CAAC;SACnD;AACH,KAAC,CAAC;AACJ;;;;"}